{
  "id": "simple-token-swap",
  "name": "Simple Token Swap",
  "index": 2,
  "level": 2,
  "website": "https://github.com/LevelUpWeb3/SimpleTokenSwap-Challenge",
  "summary": "Introduction to implementing a simple token swap contract by understanding Uniswap swap function.",
  "heroImage": "/images/level-up-preview.png",
  "labels": [
    "DeFi"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    ul: \"ul\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Simple Token Swap\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you haven't completed the ERC20 basic challenge yet, check it out \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/challenges/ERC20\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You have now grasped the functionality of ERC20 tokens. Ever wondered how you can use these tokens to swap to another token for decentralized finance use cases (i.e WETH to USDC)?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you will implement a simple Uniswap token swap contract.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Objective\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your task is to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Develop your own contract with Swap functionality.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deploy it to Scroll Sepolia Testnet.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"And finally verify it.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need help with using a smart contract framework for completing this challenge, the \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/content/level-up-foundry\",\n        children: \"Level Up: Build with Foundry\"\n      }), \" guide might be a helpful start!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you get stuck, feel free to ask for help in \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"Level Up Telegram group\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Implement Uniswap swap interface\\n// Implement library to help with token transfers\\n\\ncontract SimpleTokenSwap {\\n// Define the Uniswap Router address and the WETH address variable\\n\\n    // Define the constructor\\n    constructor(...) {\\n        // Initialize the addresses\\n    }\\n\\n    // Create a swap function that takes input and output token addresses,\\n    // the input amount, the minimum output amount, and the recipient's address\\n    function swap(\\n        ...\\n    ) external {\\n        // Transfer the input tokens from the sender to the contract\\n\\n        // Approve the Uniswap router to spend the input tokens\\n\\n        // Define the exact input swapping path to swap maximum amount of receiving token\\n\\n        // Call the Uniswap router's exactInputSingle function to execute the swap\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Constant Product Formula\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The constant product formula is used to calculate how much token B will be received by a user who sends \", _jsx(_components.em, {\n        children: \"a\"\n      }), \" amount of token A:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"a · b = k\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"a\"\n        }), \" denotes the amount of token A,\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"b\"\n        }), \" denotes the amount of token B, and\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"k\"\n        }), \" is a constant (always).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How does it work?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say Alice wants to swap her 1 ETH to DAI.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice goes to ETH/DAI pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"For the sake of simplicity, let us assume there are 10 ETH and 25,000 DAI in the pool. Therefore\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  k = (10) × (25,000) = (250,000)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice sends her 1 ETH to the pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now, the pool has 11 ETH and 25,000 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The pool sends such amount of DAI to Alice that \", _jsx(_components.em, {\n          children: \"k\"\n        }), \" remains constant.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  (11) × (25,000 - amountDAI) = 250,000\\n  amountDAI = 2,272.73\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice receives 2,272.73 DAI for 1 ETH she had.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now the pool has 11 ETH and 22,727.27 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you multiply these two numbers, you get the same \", _jsx(_components.em, {\n          children: \"k=250,000\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"The Essence of the \", _jsx(_components.code, {\n        children: \"exactInputSingle()\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"ISwapRouter.ExactInputSingleParams memory params =\\nISwapRouter.ExactInputSingleParams({\\n    tokenIn: ABC,\\n    tokenOut: WETH\\n    fee: poolFee,\\n    recipient: msg.sender,\\n    deadline: block.timestamp,\\n    amountIn: amountIn,\\n    amountOutMinimum: 0,\\n    sqrtPriceLimitX96: 0\\n});\\n\\n// The call to exactInputSingle executes the swap.\\namountOut = swapRouter.exactInputSingle(params);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/>\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Swaps an exact amount of input tokens for as many output tokens as possible. The first element of path is the input token (ABC), the last is the output token (WETH).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Key Point\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As you will use an external function from Uniswap Router, you need to know what kind of new types are needed to implement. Understanding the structs for the respective swap function is crucial.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build the Contract\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"As you'll use Uniswap Router, you need to define the contract address of it.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Implement the Uniswap swap interface.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Implement a library to help with token transfers.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Build the function:\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"a. Transfer input tokens from sender to this contract.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"b. Recall from the ERC20 mission that you need token approval.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"c. Define the exact input swapping path to swap maximum amount of receiving token.\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"d. Call \", _jsx(_components.code, {\n            children: \"exactInputSingle()\"\n          }), \" to execute the swap\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@arbnom/navigating-the-defi-landscape-a-comprehensive-deep-dive-to-amms-954020ec23b\",\n          children: \"A Comprehensive Deep Dive to AMMs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.uniswap.org/contracts/v4/overview\",\n          children: \"Overview of Uniswap\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}