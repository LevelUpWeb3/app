{
  "id": "The-Graph",
  "name": "The Graph",
  "index": 12,
  "website": "https://github.com/LevelUpWeb3/TheGraph-Mission",
  "heroImage": "/heros/test.jpg",
  "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
  "summary": "Take this mission to get started with The Graph and learn how to create and use Subgraphs to efficiently query blockchain data for your decentralized applications (dApps).",
  "labels": [
    "Decentralized Protocol",
    "GraphQL"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with The Graph\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the mission to explore The Graph by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Graph is a decentralized protocol for indexing and querying data from blockchains, initially focusing on Ethereum. It enables the creation of serverless applications that run entirely on the blockchain, providing efficient gathering and processing of blockchain data. In this mission, you'll learn how to create and use Subgraphs to query blockchain data efficiently for your decentralized applications (dApps).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Start by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on getting started with Subgraphs, including installation, setup, and code examples.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit The Graph documentation to understand the services and tools provided by the protocol.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to install the Graph CLI, initialize a Subgraph, define a GraphQL schema, create mappings, generate code, build, and deploy the Subgraph.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Execute the provided commands to deploy your Subgraph and make GraphQL queries on The Graph interface.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with The Graph and enhance the capabilities of your decentralized applications with efficient blockchain data indexing and querying!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}