{
  "id": "ERC20",
  "name": "ERC20 Basics",
  "index": 1,
  "level": 1,
  "website": "https://github.com/LevelUpWeb3/ERC20-Challenge",
  "summary": "Introduction to implementing a basic ERC20 token with minting, burning, transferring, and approving functionalities.",
  "heroImage": "/images/level-up-preview.png",
  "labels": [
    "DeFi"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"ERC20 Basics\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you haven't completed the Simple Token Swap challenge yet, check it out \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/challenges/simple-token-swap\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Most of you are probably familiar with tokens like WETH, USDT, USDC, and many others. Did you know that all of these tokens are designed by following the ERC20 standard?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you will implement a basic ERC20 token contract that includes minting, burning, transferring, and approving functionalities.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Objective\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your task is to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Develop your own ERC20 token.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deploy it to Scroll Sepolia Testnet.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"And finally verify it.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need help with using a smart contract framework for completing this challenge, the \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/content/level-up-foundry\",\n        children: \"Level Up: Build with Foundry\"\n      }), \" guide might be a helpful start!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you get stuck, feel free to ask for help in \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"Level Up Telegram group\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Define your ERC20 token contract\\ncontract MyToken is ERC20 {\\n    // Define the global variables for balances, total supply, name, and symbol below\\n\\n    // Constructor that mints the initial supply to the deployer of the contract\\n    constructor(uint256 initialSupply) ERC20(\\\"MyToken\\\", \\\"MTK\\\") {\\n        // Mint the initial supply of tokens to the deployer's address\\n    }\\n\\n    // Function to mint new tokens to a specified address\\n    function mint(address to, uint256 amount) public {\\n        // Implement the mint function using the _mint internal function\\n    }\\n\\n    // Function to burn tokens from a specified address\\n    function burn(address from, uint256 amount) public {\\n        // Implement the burn function using the _burn internal function\\n    }\\n\\n    // Function to transfer tokens from the caller's address to a specified address\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        // Implement the transfer function using the _transfer internal function\\n    }\\n\\n    // Function to approve an address to spend a certain amount of tokens on behalf of the caller\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        // Implement the approve function using the _approve internal function\\n    }\\n\\n    // Function to transfer tokens from one address to another using an allowance\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        // Implement the transferFrom function using the _transfer and _approve internal functions\\n    }\\n\\n    function getBalanceOf(address account) public view returns (uint256) {\\n        // Implement the getBalanceOf function\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Instructions\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Constructor:\"\n          }), \" The constructor should initialize the ERC20 token by minting the \", _jsx(_components.code, {\n            children: \"initialSupply\"\n          }), \" to the deployer's address. Use the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Mint Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"mint\"\n          }), \" function, which should allow you to create new tokens and assign them to a specific address. This function should call the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Burn Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"burn\"\n          }), \" function, which should allow you to destroy tokens from a specific address, reducing the total supply. Use the \", _jsx(_components.code, {\n            children: \"_burn\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Transfer Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function to allow the caller to send tokens to another address. Override the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Approve Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function, allowing the caller to authorize another address to spend a certain amount of tokens on their behalf. Override the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"TransferFrom Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function to allow a spender to transfer tokens from one address to another, using an allowance set by the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function. Override the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" functions to implement this functionality.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}