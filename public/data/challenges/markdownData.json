[
  {
    "id": "ERC20",
    "name": "ERC20 Basics",
    "index": 1,
    "level": 1,
    "website": "https://github.com/LevelUpWeb3/ERC20-Challenge",
    "summary": "Introduction to implementing a basic ERC20 token with minting, burning, transferring, and approving functionalities.",
    "heroImage": "/images/level-up-preview.png",
    "labels": [
      "DeFi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"ERC20 Basics\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you haven't completed the Simple Token Swap challenge yet, check it out \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/challenges/simple-token-swap\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Most of you are probably familiar with tokens like WETH, USDT, USDC, and many others. Did you know that all of these tokens are designed by following the ERC20 standard?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you will implement a basic ERC20 token contract that includes minting, burning, transferring, and approving functionalities.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Objective\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your task is to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Develop your own ERC20 token.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deploy it to Scroll Sepolia Testnet.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"And finally verify it.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need help with using a smart contract framework for completing this challenge, the \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/content/level-up-foundry\",\n        children: \"Level Up: Build with Foundry\"\n      }), \" guide might be a helpful start!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you get stuck, feel free to ask for help in \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"Level Up Telegram group\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// Define your ERC20 token contract\\ncontract MyToken is ERC20 {\\n    // Define the global variables for balances, total supply, name, and symbol below\\n\\n    // Constructor that mints the initial supply to the deployer of the contract\\n    constructor(uint256 initialSupply) ERC20(\\\"MyToken\\\", \\\"MTK\\\") {\\n        // Mint the initial supply of tokens to the deployer's address\\n    }\\n\\n    // Function to mint new tokens to a specified address\\n    function mint(address to, uint256 amount) public {\\n        // Implement the mint function using the _mint internal function\\n    }\\n\\n    // Function to burn tokens from a specified address\\n    function burn(address from, uint256 amount) public {\\n        // Implement the burn function using the _burn internal function\\n    }\\n\\n    // Function to transfer tokens from the caller's address to a specified address\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        // Implement the transfer function using the _transfer internal function\\n    }\\n\\n    // Function to approve an address to spend a certain amount of tokens on behalf of the caller\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        // Implement the approve function using the _approve internal function\\n    }\\n\\n    // Function to transfer tokens from one address to another using an allowance\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        // Implement the transferFrom function using the _transfer and _approve internal functions\\n    }\\n\\n    function getBalanceOf(address account) public view returns (uint256) {\\n        // Implement the getBalanceOf function\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Instructions\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Constructor:\"\n          }), \" The constructor should initialize the ERC20 token by minting the \", _jsx(_components.code, {\n            children: \"initialSupply\"\n          }), \" to the deployer's address. Use the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Mint Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"mint\"\n          }), \" function, which should allow you to create new tokens and assign them to a specific address. This function should call the \", _jsx(_components.code, {\n            children: \"_mint\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Burn Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"burn\"\n          }), \" function, which should allow you to destroy tokens from a specific address, reducing the total supply. Use the \", _jsx(_components.code, {\n            children: \"_burn\"\n          }), \" function provided by the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Transfer Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function to allow the caller to send tokens to another address. Override the \", _jsx(_components.code, {\n            children: \"transfer\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Approve Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function, allowing the caller to authorize another address to spend a certain amount of tokens on their behalf. Override the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" function from the ERC20 contract.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"TransferFrom Function:\"\n          }), \" Implement the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function to allow a spender to transfer tokens from one address to another, using an allowance set by the \", _jsx(_components.code, {\n            children: \"approve\"\n          }), \" function. Override the \", _jsx(_components.code, {\n            children: \"transferFrom\"\n          }), \" function and use the \", _jsx(_components.code, {\n            children: \"_transfer\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"_approve\"\n          }), \" functions to implement this functionality.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "simple-token-swap",
    "name": "Simple Token Swap",
    "index": 2,
    "level": 2,
    "website": "https://github.com/LevelUpWeb3/SimpleTokenSwap-Challenge",
    "summary": "Introduction to implementing a simple token swap contract by understanding Uniswap swap function.",
    "heroImage": "/images/level-up-preview.png",
    "labels": [
      "DeFi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    ul: \"ul\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Simple Token Swap\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you haven't completed the ERC20 basic challenge yet, check it out \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/challenges/ERC20\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You have now grasped the functionality of ERC20 tokens. Ever wondered how you can use these tokens to swap to another token for decentralized finance use cases (i.e WETH to USDC)?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you will implement a simple Uniswap token swap contract.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Objective\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your task is to:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Develop your own contract with Swap functionality.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deploy it to Scroll Sepolia Testnet.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"And finally verify it.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you need help with using a smart contract framework for completing this challenge, the \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/content/level-up-foundry\",\n        children: \"Level Up: Build with Foundry\"\n      }), \" guide might be a helpful start!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you get stuck, feel free to ask for help in \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"Level Up Telegram group\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Implement Uniswap swap interface\\n// Implement library to help with token transfers\\n\\ncontract SimpleTokenSwap {\\n// Define the Uniswap Router address and the WETH address variable\\n\\n    // Define the constructor\\n    constructor(...) {\\n        // Initialize the addresses\\n    }\\n\\n    // Create a swap function that takes input and output token addresses,\\n    // the input amount, the minimum output amount, and the recipient's address\\n    function swap(\\n        ...\\n    ) external {\\n        // Transfer the input tokens from the sender to the contract\\n\\n        // Approve the Uniswap router to spend the input tokens\\n\\n        // Define the exact input swapping path to swap maximum amount of receiving token\\n\\n        // Call the Uniswap router's exactInputSingle function to execute the swap\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Constant Product Formula\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The constant product formula is used to calculate how much token B will be received by a user who sends \", _jsx(_components.em, {\n        children: \"a\"\n      }), \" amount of token A:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"a · b = k\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here;\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"a\"\n        }), \" denotes the amount of token A,\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"b\"\n        }), \" denotes the amount of token B, and\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.em, {\n          children: \"k\"\n        }), \" is a constant (always).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How does it work?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's say Alice wants to swap her 1 ETH to DAI.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice goes to ETH/DAI pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"For the sake of simplicity, let us assume there are 10 ETH and 25,000 DAI in the pool. Therefore\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  k = (10) × (25,000) = (250,000)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice sends her 1 ETH to the pool.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now, the pool has 11 ETH and 25,000 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The pool sends such amount of DAI to Alice that \", _jsx(_components.em, {\n          children: \"k\"\n        }), \" remains constant.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-latex\",\n        children: \"  (11) × (25,000 - amountDAI) = 250,000\\n  amountDAI = 2,272.73\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Alice receives 2,272.73 DAI for 1 ETH she had.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Now the pool has 11 ETH and 22,727.27 DAI.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you multiply these two numbers, you get the same \", _jsx(_components.em, {\n          children: \"k=250,000\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"The Essence of the \", _jsx(_components.code, {\n        children: \"exactInputSingle()\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"ISwapRouter.ExactInputSingleParams memory params =\\nISwapRouter.ExactInputSingleParams({\\n    tokenIn: ABC,\\n    tokenOut: WETH\\n    fee: poolFee,\\n    recipient: msg.sender,\\n    deadline: block.timestamp,\\n    amountIn: amountIn,\\n    amountOutMinimum: 0,\\n    sqrtPriceLimitX96: 0\\n});\\n\\n// The call to exactInputSingle executes the swap.\\namountOut = swapRouter.exactInputSingle(params);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/>\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Swaps an exact amount of input tokens for as many output tokens as possible. The first element of path is the input token (ABC), the last is the output token (WETH).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Key Point\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As you will use an external function from Uniswap Router, you need to know what kind of new types are needed to implement. Understanding the structs for the respective swap function is crucial.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Build the Contract\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"As you'll use Uniswap Router, you need to define the contract address of it.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Implement the Uniswap swap interface.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Implement a library to help with token transfers.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Build the function:\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"a. Transfer input tokens from sender to this contract.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"b. Recall from the ERC20 mission that you need token approval.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"c. Define the exact input swapping path to swap maximum amount of receiving token.\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"d. Call \", _jsx(_components.code, {\n            children: \"exactInputSingle()\"\n          }), \" to execute the swap\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@arbnom/navigating-the-defi-landscape-a-comprehensive-deep-dive-to-amms-954020ec23b\",\n          children: \"A Comprehensive Deep Dive to AMMs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.uniswap.org/contracts/v4/overview\",\n          children: \"Overview of Uniswap\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "0x-challenge",
    "name": "0x Swap API Challenge",
    "index": 3,
    "level": 2,
    "website": "https://github.com/LevelUpWeb3/0xSwapAPI-Challenge",
    "summary": "Learn to use the 0x Swap API to display liquidity sources, monetize your app, and manage token taxes on Scroll.",
    "heroImage": "/images/level-up-preview.png",
    "labels": [
      "DeFi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    hr: \"hr\",\n    h3: \"h3\",\n    strong: \"strong\",\n    em: \"em\",\n    h4: \"h4\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"0x Swap API Challenge\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before diving into this guide, make sure you’ve completed the \", _jsx(_components.a, {\n        href: \"https://www.levelup.xyz/content/0x-on-scroll\",\n        children: \"How to fetch live swap prices with 0x Swap API on Scroll\"\n      }), \" guide. This will give you a solid understanding of fetching swap quotes and prepare you for the tasks ahead.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this challenge, you'll explore advanced features of the 0x Swap API, including displaying swap breakdowns, handling buy/sell token taxes, and monetizing your app. By the end, you’ll be able to use these features to enhance your trading experience.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's get started! 💪\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Objective\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Display the percentage breakdown of liquidity sources\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Monetize your app with affiliate fees and surplus collection\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Display buy/sell taxes for tokens with taxes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Find all sources of liquidity on Scroll\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"Instructions\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"0. Get Starter Code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fork this code repository: \", _jsx(_components.a, {\n        href: \"https://github.com/LevelUpWeb3/0xSwapAPI-Challenge\",\n        children: \"https://github.com/LevelUpWeb3/0xSwapAPI-Challenge\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will need to build on top of this code to complete the following tasks.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"1. Display Percentage Breakdown of Liquidity Sources\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The 0x Swap API uses smart order routing to find the best price and execution path, often splitting trades across multiple sources and identifying intermediate tokens for deeper liquidity.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Often the direct route for a swap isn't always the best price. 0x Swap API uses smart order routing to deliver the best price and optimal execution path by using \", _jsx(_components.strong, {\n        children: \"multiplexing\"\n      }), \" (splitting a trade across multiple sources) and \", _jsx(_components.strong, {\n        children: \"multihopping\"\n      }), \" (identifying intermediate token steps which open up deeper liquidity).\"]\n    }), \"\\n\", _jsxs(\"div\", {\n      className: \"text-center\",\n      children: [_jsx(\"img\", {\n        src: \"/images/challenges/order-route.png\",\n        alt: \"order route screenshot\",\n        width: \"650\"\n      }), _jsx(_components.p, {\n        children: _jsx(_components.em, {\n          children: \"0x routes to find the best liquidity sources for a swap through both on-chain\\nand off-chain sources. You can use the API response data to display a Sankey diagram\\nthat visualizes the routes like the one from Matcha.xyz for a swap of WETH to USDC.\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Task 1\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"route\"\n      }), \" response parameter returned by the \", _jsx(_components.a, {\n        href: \"https://0x.org/docs/api#tag/Swap/operation/swap::permit2::getQuote\",\n        children: _jsx(_components.code, {\n          children: \"/swap/permit2/quote\"\n        })\n      }), \" endpoint to show users a percentage breakdwon of where their swap liquidity comes from.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if this is the \", _jsx(_components.code, {\n        children: \"route\"\n      }), \" object returned, it shows that the swap is executed using 50% liquidity from Ambient and 50% from Nuri,\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \" \\\"route\\\": {\\n    \\\"fills\\\": [\\n      {\\n        from\\\": \\\"0x5300000000000000000000000000000000000004\\\",\\n        \\\"to\\\": \\\"0x06efdbff2a14a7c8e15944d1f4a48f9f95f663a4\\\",\\n        \\\"source\\\": \\\"Ambient\\\",\\n        \\\"proportionBps\\\": \\\"5000\\\"\\n      },\\n      {\\n       from\\\": \\\"0x06efdbff2a14a7c8e15944d1f4a48f9f95f663a4\\\",\\n        \\\"to\\\": \\\"0xf610a9dfb7c89644979b4a0f27063e9e7d7cda32\\\",\\n        \\\"source\\\": \\\"Nuri_CL\\\",\\n        \\\"proportionBps\\\": \\\"5000\\\"\\n      },\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then for this quote, the app should print:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"2 Sources\\nAmbient: 50%\\nNuri_CL: 50%\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"2. Monetize Your App\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The 0x Swap API allows you to monetize your app through:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://0x.org/docs/0x-swap-api/guides/monetize-your-app-using-swap#option-1-collect-affiliate-fees\",\n          children: \"Collecting an affiliate fee (aka trading fee or commission)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://0x.org/docs/0x-swap-api/guides/monetize-your-app-using-swap#option-2-collect-trade-surplus\",\n          children: \"Collecting trade surplus (aka positive slippage)\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read how to implement \", _jsx(_components.a, {\n        href: \"https://0x.org/docs/0x-swap-api/guides/monetize-your-app-using-swap\",\n        children: \"these two monetization options\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Task 2\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add the required query parameters to your \", _jsx(_components.code, {\n        children: \"/quote\"\n      }), \" request to enable affiliate fees and trade surplus collection.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Display Buy/Sell Token Tax\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Some tokens have buy or sell taxes that affect the final swap amount. Fetch and display this information in your app to inform users about any potential taxes before completing a trade.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"tokenMetadata\"\n      }), \" object returned in the \", _jsx(_components.code, {\n        children: \"/price\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"/quote\"\n      }), \" endpoints. This object contains the buy/sell tax information for the tokens involved in the swap.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read how to \", _jsx(_components.a, {\n        href: \"https://0x.org/docs/developer-resources/buy-sell-tax-support\",\n        children: \"implement buy/sell tax support\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Task 3\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use the \", _jsx(_components.code, {\n        children: \"tokenMetadata\"\n      }), \" response parameter returned by the \", _jsx(_components.a, {\n        href: \"https://0x.org/docs/api#tag/Swap/operation/swap::permit2::getQuote\",\n        children: _jsx(_components.code, {\n          children: \"/swap/permit2/quote\"\n        })\n      }), \" endpoint to display the buy/sell tax information if the token has it.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, if the \", _jsx(_components.code, {\n        children: \"buyToken\"\n      }), \" has a 200bps buy tax,\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"\\\"tokenMetadata\\\": {\\n    \\\"buyToken\\\": {\\n      \\\"buyTaxBps\\\": \\\"200\\\",\\n      \\\"sellTaxBps\\\": \\\"147\\\"\\n    },\\n    \\\"sellToken\\\": {\\n      \\\"buyTaxBps\\\": \\\"0\\\",\\n      \\\"sellTaxBps\\\": \\\"0\\\"\\n    }\\n  },\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The app should print:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Buy Token Buy Tax: 0.20%\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. Find All Sources of Liquidity on Scroll\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The 0x Swap API aggregates liquidity from multiple decentralized exchanges (DEXs) and other sources on the Scroll chain.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"/sources\"\n      }), \" endpoint can be used to get a list of supported supporces for a specific chain. Read more about how to \", _jsxs(_components.a, {\n        href: \"https://0x.org/docs/api#tag/Sources\",\n        children: [\"query the \", _jsx(_components.code, {\n          children: \"/sources\"\n        }), \" endpoint\"]\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Task 4\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Retrieve and display a list of all the available liquidity sources on the Scroll chain.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The app should print:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Liquidity sources for Scroll chain:\\n     Ambient,\\n     DODO_V2,\\n     IziSwap,\\n     Maverick_V2,\\n     Metavault_V2,\\n     Metavault_V3,\\n     Nuri_CL,\\n     Skydrome,\\n     SushiSwap_V3,\\n     SyncSwap,\\n     Tokan,\\n     Zebra_V2\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Learn More\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations on exploring advanced features of the 0x Swap API on Scroll!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check out these starter projects to dive deeper:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Build a Next.js 0x Demo App: \", _jsx(_components.a, {\n          href: \"https://github.com/0xProject/0x-examples/tree/main/swap-v2-next-app\",\n          children: \"Code\"\n        }), \" | \", _jsx(_components.a, {\n          href: \"./build-token-swap-dapp-nextjs\",\n          children: \"Guide\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Explore more 0x examples in the \", _jsx(_components.a, {\n          href: \"https://github.com/0xProject/0x-examples\",\n          children: \"Examples Repo\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Try out the \", _jsx(_components.a, {\n          href: \"https://0x.org/docs/gasless-api/introduction\",\n          children: \"0x Gasless API\"\n        }), \" for gasless swaps!\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Social Links\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you found this content helpful, please share it and tag \", _jsx(_components.a, {\n        href: \"https://x.com/0xProject\",\n        children: \"@0xproject\"\n      }), \" and the author \", _jsx(_components.a, {\n        href: \"https://x.com/hey_its_jlin\",\n        children: \"@hey_its_jlin\"\n      }), \" on X!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  }
]