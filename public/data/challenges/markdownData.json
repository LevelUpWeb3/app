[
  {
    "id": "Ankr",
    "name": "Ankr Protocol",
    "index": 6,
    "website": "https://github.com/LevelUpWeb3/Ankr-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with Ankr",
    "labels": [
      "Defi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with Ankr.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to the level 1 of an exciting mission of Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ankr.js is a JS library that lets user users interact with Ankr's Advanced APIs. In this guide, you'll learn how to retrieve NFTs, belonging to a particular user.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Start by exploring the GitHub repo and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Move on to the guide where you will find how to retrieve NFTs that a particular user owns by using Ankr.js.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Installing \", _jsx(_components.code, {\n          children: \"ankr.js\"\n        }), \" package.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Building a simple JS code to query and retrieve NFTs.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "Aztec",
    "name": "Aztec Network",
    "index": 7,
    "website": "https://github.com/LevelUpWeb3/Aztec-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with Aztec",
    "labels": [
      "Defi"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with Aztec.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the Aztec mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Aztec.js is a library that provides APIs for managing accounts and interacting with contracts on the Aztec network. In this guide, you'll learn how to deploy contracts, send transactions, and call view functions.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on deploying contracts, sending transactions, and calling view functions using Aztec.js.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Install the \", _jsx(_components.code, {\n          children: \"aztec.js\"\n        }), \" package.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Build a simple JavaScript code to deploy a contract, send a transaction, and call a view function.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Follow the steps outlined in the guide to complete your mission and level up your skills with Aztec.js!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "Chainlink",
    "name": "Chainlink",
    "index": 8,
    "website": "https://github.com/LevelUpWeb3/Chainlink-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with Chainlink Data Feeds",
    "labels": [
      "Decentralized Oracle",
      "Smart Contracts"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with Chainlink Data Feeds\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the Chainlink mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Chainlink is a decentralized oracle network that enables smart contracts on Ethereum to securely connect to external data sources, APIs, and payment systems. In this mission, you'll learn how to leverage Chainlink Data Feeds to connect your smart contracts to real-world data.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on using Chainlink Data Feeds to fetch real-world data in your smart contracts.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Explore the Chainlink documentation to understand the capabilities and use cases of Chainlink Data Feeds.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to consume price data using Chainlink Data Feeds in your smart contracts.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with Chainlink and enhance the capabilities of your smart contracts with real-world data!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "Covalent",
    "name": "Covalent",
    "index": 9,
    "website": "https://github.com/LevelUpWeb3/Covalent-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with Covalent TypeScript SDK",
    "labels": [
      "Blockchain Data",
      "API Integration"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with Covalent TypeScript SDK\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the Covalent mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Covalent provides a unified API bringing visibility to blockchain data points, enabling developers to build data-rich applications without the need for complex blockchain data management. In this mission, you'll learn how to leverage the Covalent TypeScript SDK to access deep, reliable data across multiple blockchains.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on using the Covalent TypeScript SDK to integrate the Unified API for blockchain data.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit the Covalent documentation to understand the capabilities and services provided by Covalent.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to install the Covalent client SDK, initialize it with your API key, and call methods to retrieve token balances for a wallet address.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with Covalent and unlock the power of blockchain data for your applications!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "OpenZeppelin",
    "name": "OpenZeppelin",
    "index": 10,
    "website": "https://github.com/LevelUpWeb3/OpenZeppelin-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with OpenZeppelin Contracts Wizard",
    "labels": [
      "Smart Contracts",
      "Security"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with OpenZeppelin Contracts Wizard\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the OpenZeppelin mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenZeppelin offers a suite of tools and libraries designed to help developers create, deploy, and manage smart contracts in a secure and efficient manner. In this mission, you'll learn how to use the OpenZeppelin Contracts Wizard to create custom ERC smart contracts for Ethereum.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on using the OpenZeppelin Contracts Wizard to create an ERC-20 token.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit the OpenZeppelin documentation to understand the services and tools provided.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to access the OpenZeppelin Contracts Wizard, create an ERC-20 token, customize its features, set parameters, and generate Solidity code.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Set up your development environment with Hardhat or Truffle and install the OpenZeppelin Contracts library.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integrate the generated Solidity code into your project and deploy your ERC-20 token to a test network.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with OpenZeppelin and start building secure and efficient smart contracts for your blockchain projects!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "Sindri",
    "name": "Sindri",
    "index": 11,
    "website": "https://github.com/LevelUpWeb3/Sindri-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with Sindri's API for zero-knowledge proof (ZKP) generation",
    "labels": [
      "Zero-Knowledge Proofs",
      "API Integration"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with Sindri\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the Sindri mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sindri Labs' API provides simple access to hardware acceleration for zero-knowledge proof (ZKP) generation, making ZKP generation easier by transforming complex infrastructure into simple API calls. In this mission, you'll learn how to use Sindri's API for ZKP generation.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on getting started with Sindri, including installation, authentication, and usage of the Sindri CLI and Python SDK.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit the Sindri documentation to understand the services and capabilities provided by Sindri Labs' API.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to install the Sindri CLI, authenticate and log in, compile and deploy circuits, and use the Sindri Python SDK to prove circuits.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Execute the provided Python script to run your first proof on Sindri.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with zero-knowledge proofs and leverage Sindri's API for secure and efficient ZKP generation!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "The-Graph",
    "name": "The Graph",
    "index": 12,
    "website": "https://github.com/LevelUpWeb3/TheGraph-Mission",
    "heroImage": "/heros/test.jpg",
    "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
    "summary": "Take this mission to get started with The Graph and learn how to create and use Subgraphs to efficiently query blockchain data for your decentralized applications (dApps).",
    "labels": [
      "Decentralized Protocol",
      "GraphQL"
    ],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with The Graph\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the mission to explore The Graph by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Graph is a decentralized protocol for indexing and querying data from blockchains, initially focusing on Ethereum. It enables the creation of serverless applications that run entirely on the blockchain, providing efficient gathering and processing of blockchain data. In this mission, you'll learn how to create and use Subgraphs to query blockchain data efficiently for your decentralized applications (dApps).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Start by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on getting started with Subgraphs, including installation, setup, and code examples.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit The Graph documentation to understand the services and tools provided by the protocol.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to install the Graph CLI, initialize a Subgraph, define a GraphQL schema, create mappings, generate code, build, and deploy the Subgraph.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Execute the provided commands to deploy your Subgraph and make GraphQL queries on The Graph interface.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with The Graph and enhance the capabilities of your decentralized applications with efficient blockchain data indexing and querying!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  }
]