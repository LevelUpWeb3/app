{
  "id": "fallback",
  "name": "Fallback",
  "index": 24,
  "lesson": 24,
  "summary": "Introduction to fallback function and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Fallback\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 1\n      }, this), \" function is activated when:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"A contract is called without any function that exists\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: \"No data was provided and there is no receive Ether function\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 7,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"A contract can have at most one \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 33\n      }, this), \" function declared using either:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: _jsxDEV(_components.code, {\n          children: \"fallback() external payable { ... }\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 11,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: _jsxDEV(_components.code, {\n          children: \"fallback (bytes calldata input) external payable returns (bytes memory output) { ... }\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 12,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"If \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 4\n      }, this), \" function was used in place of a \", _jsxDEV(_components.code, {\n        children: \"receive\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 47\n      }, this), \" function, it will only have 2300 gas stipend to limit gas intensive operations.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 14,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Notice how \", _jsxDEV(_components.code, {\n        children: \"function\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 12\n      }, this), \" keyword is not required when declaring a \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 64\n      }, this), \" function. All fallback functions must have \", _jsxDEV(_components.code, {\n        children: \"external\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 118\n      }, this), \" visibility.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 16,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Example 1: Receiving Ether\\ncontract EtherReceiver {\\n    uint public totalReceived;\\n\\n    // This fallback function is used to keep track of the total Ether received by the contract.\\n    // It's triggered when Ether is sent to the contract's address in a transaction without data.\\n    fallback() external payable {\\n        totalReceived += msg.value;\\n    }\\n}\\n\\n// Example 2: Proxy Pattern\\ncontract Proxy {\\n    address public implementation;\\n\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    // This fallback function is used to implement the proxy pattern.\\n    // Assuming implementation variable has `delegatecall` function.\\n    // It catches any calls that don't match any of the proxy's functions and forwards them to the implementation contract.\\n    // It's triggered when a function that doesn't exist in the proxy contract is called.\\n    fallback() external payable {\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n        require(success);\\n    }\\n}\\n\\n// Example 3: Default Functionality\\ncontract DefaultFunctionality {\\n    // Event to emit when the fallback function is triggered\\n    event FallbackTriggered(string message);\\n\\n    // This fallback function provides default functionality when no function is specified or the specified function doesn't exist.\\n    // It's triggered when the contract is called without specifying any function, or if the function specified doesn't exist in the contract.\\n    fallback() external {\\n        // Emit an event when the fallback function is triggered\\n        emit FallbackTriggered(\\\"Fallback function was called.\\\");\\n    }\\n}\\n\\n// Example 4: Fallback with bytes type input and output\\ncontract FallbackWithInputOutput {\\n    // Event to emit when the fallback function is triggered\\n    event FallbackTriggered(string message, bytes input, bytes output);\\n\\n    // This fallback function takes an input, performs some operation, and returns an output.\\n    // It's triggered when the contract is called without specifying any function, or if the function specified doesn't exist in the contract.\\n    fallback(bytes calldata input) external payable returns (bytes memory) {\\n        // Perform some operation with the input\\n        bytes memory output = new bytes(input.length);\\n        for (uint i = 0; i < input.length; i++) {\\n            output[i] = input[i];\\n        }\\n\\n        // Emit an event when the fallback function is triggered\\n        emit FallbackTriggered(\\\"Fallback function was called.\\\", input, output);\\n\\n        return output;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}