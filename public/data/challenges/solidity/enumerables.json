{
  "id": "enumerables",
  "order": 11,
  "title": "Enumerables",
  "description": "Introduction to enum types and how to use it in your smart contracts.",
  "difficulty": "Beginner",
  "published": true,
  "name": "Enumerables",
  "index": 11,
  "lesson": 11,
  "summary": "Introduction to enum types and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Enumerables\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Solidity supports enumerables(enum) and they are useful to keep track of state. Enums are one way to create a user-defined type.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The options are represented by subsequent unsigned integer values starting from \", _jsx(_components.code, {\n        children: \"0\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Game {\\n    // Enum representing game status\\n    enum Status {\\n        NotStarted,\\n        InProgress,\\n        GameOver,\\n        Won\\n    }\\n\\n    // Default value is the first element listed in\\n    // definition of the type, in this case \\\"NotStarted\\\"\\n    Status public status;\\n\\n    // Returns uint\\n    // NotStarted - 0\\n    // InProgress - 1\\n    // GameOver   - 2\\n    // Won        - 3\\n    function getStatus() public view returns (Status) {\\n        return status;\\n    }\\n\\n    // Update status by passing uint into input\\n    function setStatus(Status _status) public {\\n        status = _status;\\n    }\\n\\n    // You can update to a specific enum like this\\n    function win() public {\\n        status = Status.Won;\\n    }\\n\\n    // delete resets the enum to its first value, 0\\n    function reset() public {\\n        delete status;\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To declare \", _jsx(_components.code, {\n        children: \"enum\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity//\",\n        children: \"pragma solidity ^0.8.24;\\n// This is saved as 'GameStatus.sol'\\n\\nenum Status {\\n    NotStarted,\\n    InProgress,\\n    GameOver,\\n    Won\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To import the \", _jsx(_components.code, {\n        children: \"enum\"\n      }), \" above:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./GameStatus.sol\\\";\\n\\ncontract Enum {\\n    Status public status;\\n\\n    function setStatus(Status _status) public {\\n        status = _status;\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}