{
  "id": "arrays",
  "name": "Arrays",
  "index": 6,
  "lesson": 6,
  "summary": "Introduction to Solidity Arrays",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Arrays\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Arrays can have a compile-time fixed size, or they can have a dynamic size.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The type of an array of fixed size \", _jsxDEV(_components.code, {\n        children: \"k\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 36\n      }, this), \" and element type \", _jsxDEV(_components.code, {\n        children: \"T\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 57\n      }, this), \" is written as \", _jsxDEV(_components.code, {\n        children: \"T[k]\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 75\n      }, this), \", and an array of dynamic size as \", _jsxDEV(_components.code, {\n        children: \"T[]\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 115\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract ArrayExample {\\n    // An array of fixed size 3 and element type uint\\n    uint[3] public fixedArray = [1, 2, 3];\\n\\n    // An array of dynamic size and element type uint\\n    uint[] public dynamicArray;\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"It is possible to mark state variable arrays public and have Solidity create a getter(which you will learn later in the challenges). The numeric index becomes a required parameter for the getter.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 20,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"More array examples:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 22,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Array {\\n    // Several ways to initialize an array\\n    uint256[] public arr;\\n    uint256[] public arr2 = [1, 2, 3];\\n    // Fixed sized array, all elements initialize to 0\\n    uint256[10] public myFixedSizeArr;\\n\\n    function get(uint256 i) public view returns (uint256) {\\n        return arr[i];\\n    }\\n\\n    // Solidity can return the entire array.\\n    // But this function should be avoided for\\n    // arrays that can grow indefinitely in length.\\n    function getArr() public view returns (uint256[] memory) {\\n        return arr;\\n    }\\n\\n    function push(uint256 i) public {\\n        // Append to array\\n        // This will increase the array length by 1.\\n        arr.push(i);\\n    }\\n\\n    function pop() public {\\n        // Remove last element from array\\n        // This will decrease the array length by 1\\n        arr.pop();\\n    }\\n\\n    function getLength() public view returns (uint256) {\\n        return arr.length;\\n    }\\n\\n    function remove(uint256 index) public {\\n        // Delete does not change the array length.\\n        // It resets the value at index to it's default value,\\n        // in this case 0\\n        delete arr[index];\\n    }\\n\\n    function examples() external {\\n        // create array in memory, only fixed size can be created\\n        uint256[] memory a = new uint256[](5);\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 24,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 24,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}