{
  "id": "functions",
  "name": "Functions",
  "index": 9,
  "lesson": 9,
  "summary": "Introduction to Solidity functions and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Functions\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Functions can be defined inside and outside of contracts. Functions take typed parameters as input.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"To write or update a state variable you need to send a transaction.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Free function defined outside of a contract\\n// Always has implicit internal visibility\\nfunction freeFunction(uint a, uint b) pure returns (uint) {\\n    return a + b;\\n}\\n\\ncontract Simple {\\n    uint sum;\\n\\n    // Function defined inside a contract\\n    // Takes two uint parameters as input\\n    function taker(uint a, uint b) public {\\n        sum = a + b;\\n    }\\n\\n    // Function that returns multiple values\\n    // The names of return variables can be omitted\\n    function arithmetic(uint a, uint b)\\n        public\\n        pure\\n        returns (uint, uint)\\n    {\\n        return (a + b, a * b);\\n    }\\n\\n    // Function that uses an early return\\n    // Must provide return values together with the return statement\\n    function earlyReturn(uint a, uint b)\\n        public\\n        pure\\n        returns (uint sum, uint product)\\n    {\\n        if (a == 0 || b == 0) {\\n            return (0, 0);\\n        }\\n\\n        sum = a + b;\\n        product = a * b;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}