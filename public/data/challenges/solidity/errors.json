{
  "id": "errors",
  "name": "Errors",
  "index": 18,
  "lesson": 18,
  "summary": "Introduction to errors and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Errors\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Errors in Solidity provide a convenient and gas-efficient way to explain why an operation failed. They can be defined inside and outside of contracts (including interfaces and libraries).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"They have to be used together with \", _jsx(_components.code, {\n        children: \"revert\"\n      }), \" statement which causes all changes in the current call to be reverted and passes the error data back to the caller.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instances of errors can only be created using \", _jsx(_components.code, {\n        children: \"revert\"\n      }), \" statements.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Examples of ways to use custom errors:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Error for insufficient balance for transfer. Needed `required` but only\\n// `available` available.\\n// @param available balance available.\\n// @param required requested amount to transfer.\\nerror InsufficientBalance(uint256 available, uint256 required);\\n\\n// Error for invalid recipient address\\nerror InvalidRecipient(address recipient);\\n\\n// Error for transfer amount being zero\\nerror ZeroTransfer();\\n\\ncontract MyToken {\\n    mapping(address => uint) balance;\\n\\n    function transfer(address to, uint256 amount) public {\\n        if (amount > balance[msg.sender]) {\\n            revert InsufficientBalance({\\n                available: balance[msg.sender],\\n                required: amount\\n            });\\n        }\\n\\n        if (to == address(0)) {\\n            revert InvalidRecipient(to);\\n        }\\n\\n        if (amount == 0) {\\n            revert ZeroTransfer();\\n        }\\n\\n        balance[msg.sender] -= amount;\\n        balance[to] += amount;\\n    }\\n    // ...\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}