{
  "id": "immutable",
  "name": "Immutable",
  "index": 4,
  "lesson": 4,
  "summary": "Introduction to immutable in Solidity",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Immutable\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Variables declared as \", _jsx(_components.code, {\n        children: \"immutable\"\n      }), \" are a less restricted than those declared as \", _jsx(_components.code, {\n        children: \"constant\"\n      }), \". Immutable variables can be assigned a value at construction time. The value can be changed at any time before deployment and then it becomes permanent.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One additional restriction is that immutables can only be assigned to inside expressions for which there is no possibility of being executed after creation. This excludes all modifier definitions and functions other than constructors.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Immutable {\\n    // coding convention to uppercase constant variables address public immutable MY_ADDRESS;\\n    uint256 public immutable MY_UINT;\\n\\n    constructor(uint256 _myUint) {\\n        MY_ADDRESS = msg.sender;\\n        MY_UINT = _myUint;\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}