{
  "id": "struct",
  "name": "Struct",
  "index": 12,
  "lesson": 12,
  "summary": "Introduction to struct types and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Struct\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Structs are custom defined types that can group several variables.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"You can define the type by creating a \", _jsxDEV(_components.code, {\n        children: \"struct\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 39\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Structs can be declared outside of a contract and imported in another contract.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Tasks {\\n    // Define a new struct type 'Task' with three fields.\\n    struct Task {\\n        string title;\\n        string description;\\n        bool done;\\n    }\\n\\n    // Declare a dynamic array 'tasks' of 'Task' structs.\\n    Task[] public tasks;\\n\\n    // Add a new task to the 'tasks' array.\\n    function addTask(string calldata _title, string calldata _description) public {\\n        // Create a new temporary 'Task' object in memory.\\n        Task memory newTask;\\n        newTask.title = _title;\\n        newTask.description = _description;\\n        newTask.done = false;\\n\\n        // Add the 'newTask' into the 'tasks' array.\\n        tasks.push(newTask);\\n    }\\n\\n    // Mark a task as done.\\n    function markTaskAsDone(uint256 _index) public {\\n        // Get a reference to the task in the 'tasks' array using the '_index'.\\n        Task storage task = tasks[_index];\\n        task.done = true;\\n    }\\n\\n    // Get the details of a task.\\n    function getTask(uint256 _index) public view returns (string memory title, string memory description, bool done) {\\n        Task storage task = tasks[_index];\\n        return (task.title, task.description, task.done);\\n    }\\n\\n    // Update the title of a task.\\n    function updateTaskTitle(uint256 _index, string calldata _newTitle) public {\\n        Task storage task = tasks[_index];\\n        task.title = _newTitle; // Set the new title of the task\\n    }\\n\\n    // Update the description of a task.\\n    function updateTaskDescription(uint256 _index, string calldata _newDescription) public {\\n        Task storage task = tasks[_index];\\n        task.description = _newDescription;\\n    }\\n\\n    // Delete the task from the 'tasks' array using the '_index'.\\n    // Note: The 'delete' keyword in Solidity doesn't actually delete the task from the 'tasks' array,\\n    // it just sets the task at the given index to its initial default state (i.e., an empty string (\\\"\\\") for 'title' and 'description', and 'false' for 'done').\\n    function deleteTask(uint256 _index) public {\\n        delete tasks[_index];\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Structs can also be declared and imported just like \", _jsxDEV(_components.code, {\n        children: \"enum\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 71,\n        columnNumber: 53\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 71,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}