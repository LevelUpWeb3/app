[
  {
    "id": "data-types",
    "name": "Data Types",
    "index": 1,
    "lesson": 1,
    "summary": "Introduction to Solidity data types",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"img\", {\n      src: \"/images/solidity/data-types.png\",\n      alt: \"Data Types\",\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      }\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Data Types\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Solidity is a statically typed language, which means that the type of each variable (state and local) needs to be specified. Solidity provides several elementary types such as:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"bool\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 15,\n          columnNumber: 3\n        }, this), \" (boolean)\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"uint\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 16,\n          columnNumber: 3\n        }, this), \",\", _jsxDEV(_components.code, {\n          children: \"uint256\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 16,\n          columnNumber: 10\n        }, this), \",\", _jsxDEV(_components.code, {\n          children: \"uint32\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 16,\n          columnNumber: 20\n        }, this), \" (unsigned integer)\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"int\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 17,\n          columnNumber: 3\n        }, this), \",\", _jsxDEV(_components.code, {\n          children: \"int256\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 17,\n          columnNumber: 9\n        }, this), \",\", _jsxDEV(_components.code, {\n          children: \"int32\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 17,\n          columnNumber: 18\n        }, this), \" (signed integer)\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"address\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 18,\n          columnNumber: 3\n        }, this), \" (Ethereum address)\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Primitives {\\n    bool public boo = true;\\n\\n    /*\\n    uint stands for unsigned integer, meaning non negative integers\\n    different sizes are available\\n        uint8   ranges from 0 to 2 ** 8 - 1\\n        uint16  ranges from 0 to 2 ** 16 - 1\\n        ...\\n        uint256 ranges from 0 to 2 ** 256 - 1\\n    */uint8 public u8 = 1;\\n    uint256 public u256 = 456;\\n    uint256 public u = 123; // uint is an alias for uint256/*\\n    Negative numbers are allowed for int types.\\n    Like uint, different ranges are available from int8 to int256\\n\\n    int256 ranges from -2 ** 255 to 2 ** 255 - 1\\n    int128 ranges from -2 ** 127 to 2 ** 127 - 1\\n    */int8 public i8 = -1;\\n    int256 public i256 = 456;\\n    int256 public i = -123; // int is same as int256// minimum and maximum of intint256 public minInt = type(int256).min;\\n    int256 public maxInt = type(int256).max;\\n\\n    address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 20,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 20,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"Bytes in Solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In Solidity, the \", _jsxDEV(_components.code, {\n        children: \"bytes\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 53,\n        columnNumber: 18\n      }, this), \" data type is used to represent a sequence of bytes. Bytes are useful for storing binary data, such as file contents or cryptographic hashes.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 53,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"There are two types of byte arrays in Solidity:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 55,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Fixed-size byte arrays\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 3\n          }, this), \": These are declared with \", _jsxDEV(_components.code, {\n            children: \"bytes1\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 55\n          }, this), \" to \", _jsxDEV(_components.code, {\n            children: \"bytes32\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 67\n          }, this), \". The number indicates the length of the array in bytes. For example, \", _jsxDEV(_components.code, {\n            children: \"bytes1\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 146\n          }, this), \" is a byte array of length 1, \", _jsxDEV(_components.code, {\n            children: \"bytes2\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 184\n          }, this), \" is a byte array of length 2, and so on up to \", _jsxDEV(_components.code, {\n            children: \"bytes32\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 57,\n            columnNumber: 238\n          }, this), \".\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 57,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 57,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.strong, {\n            children: \"Dynamically-sized byte arrays\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 3\n          }, this), \": These are declared with \", _jsxDEV(_components.code, {\n            children: \"bytes\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 62\n          }, this), \". This type is similar to \", _jsxDEV(_components.code, {\n            children: \"byte[]\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 59,\n            columnNumber: 95\n          }, this), \" in other languages.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 59,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 59,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 57,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Here's an example of how to use byte arrays:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 61,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// Declare a fixed-size byte array\\nbytes1 a = 0xb5; // [10110101]\\nbytes1 b = 0x56; // [01010110]\\n\\n// Declare a bytes10 array\\nbytes10 d = 0x68656c6c6f776f726c64; // \\\"helloworld\\\" in hexadecimal\\n\\n// Declare a bytes32 array\\nbytes32 e = 0x68656c6c6f776f726c6420202020202020202020202020202020202020202020; // \\\"helloworld\\\" padded with spaces in hexadecimal\\n\\n// Declare a dynamically-sized byte array\\nbytes memory c = \\\"Hello, world!\\\";\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 63,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 63,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "operator",
    "name": "Operator",
    "index": 2,
    "lesson": 2,
    "summary": "Introduction to Solidity operators",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"img\", {\n      src: \"/images/solidity/operator.png\",\n      alt: \"Operator\",\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      }\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Operator\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Operators link variables, statements and functions together. In Solidity, arithmetic and bit operators can be applied even if two operands do not have same type.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT*pragma solidity ^0.8.24;\\n\\ncontract Operator {\\n\\n    uint8 public constant x = 1;\\n    uint32 public constant y = 4;\\n    //x + y = 5;\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Ternary operator is used in expressions of the form \", _jsxDEV(_components.code, {\n        children: \"<conditional> ? <if-true> : <if-false>\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 26,\n        columnNumber: 53\n      }, this), \". It evaluates if \", _jsxDEV(_components.code, {\n        children: \"<conditional>\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 26,\n        columnNumber: 111\n      }, this), \" is truthy or falsy.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 26,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Compound and increment/decrement operators are available as shorthands. For example, \", _jsxDEV(_components.code, {\n        children: \"a += e\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 28,\n        columnNumber: 86\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"a = a + e\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 28,\n        columnNumber: 112\n      }, this), \" .\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Other examples:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 30,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"a++\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 32,\n          columnNumber: 3\n        }, this), \" (equivalent to \", _jsxDEV(_components.code, {\n          children: \"a += 1\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 32,\n          columnNumber: 24\n        }, this), \" )\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 32,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"a--\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 33,\n          columnNumber: 3\n        }, this), \" (equivalent to \", _jsxDEV(_components.code, {\n          children: \"a -= 1\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 33,\n          columnNumber: 24\n        }, this), \" )\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 32,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"*=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 35,\n        columnNumber: 1\n      }, this), \" Multiplication assignment operator:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 35,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let a = 5; // a is 5\\na *= 2; // a is now 10 (5 * 2)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 37,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 37,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"a *= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"a = a * 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 44\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \"*=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 61\n      }, this), \" operator multiplies the value of \", _jsxDEV(_components.code, {\n        children: \"a\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 99\n      }, this), \" by \", _jsxDEV(_components.code, {\n        children: \"2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 106\n      }, this), \" and then assigns the result back to \", _jsxDEV(_components.code, {\n        children: \"a\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 146\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 42,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"<<=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 44,\n        columnNumber: 1\n      }, this), \" Left shift assignment operator:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let b = 4; // b is 4 (binary representation: 100)\\nb <<= 2; // b is now 16 (binary representation: 10000)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 46,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 46,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"b <<= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"b = b << 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 45\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \"<<=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 63\n      }, this), \" operator shifts the bits of \", _jsxDEV(_components.code, {\n        children: \"b\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 97\n      }, this), \" two places to the left. Each shift to the left doubles the number, so shifting \", _jsxDEV(_components.code, {\n        children: \"4\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 180\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"100\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 194\n      }, this), \" in binary) two places to the left results in \", _jsxDEV(_components.code, {\n        children: \"16\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 245\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"10000\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 260\n      }, this), \" in binary).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \">>=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 53,\n        columnNumber: 1\n      }, this), \" Right shift assignment operator\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 53,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let c = 16; // c is 16 (binary representation: 10000)\\nc >>= 2; // c is now 4 (binary representation: 100)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 55,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 55,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"c >>= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"c = c >> 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 45\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \">>=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 63\n      }, this), \" operator shifts the bits of \", _jsxDEV(_components.code, {\n        children: \"c\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 97\n      }, this), \" two places to the right. Each shift to the right halves the number, so shifting \", _jsxDEV(_components.code, {\n        children: \"16\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 181\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"10000\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 196\n      }, this), \" in binary) two places to the right results in \", _jsxDEV(_components.code, {\n        children: \"4\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 250\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"100\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 60,\n        columnNumber: 264\n      }, this), \" in binary).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 60,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "constants",
    "name": "Constants",
    "index": 3,
    "lesson": 3,
    "summary": "Introduction to Solidity constants",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"img\", {\n      src: \"/images/solidity/constants.png\",\n      alt: \"Constants\",\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      }\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h1, {\n      children: \"Constants\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Constants are variables that cannot be modified. Constants should be named with all capital letters with underscores separating words. Examples: \", _jsxDEV(_components.code, {\n        children: \"MAX_BLOCKS\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 146\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"TOKEN_NAME\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 160\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"TOKEN_TICKER\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 174\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"CONTRACT_VERSION\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 190\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 13,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Their value is hard coded and using constants can save gas cost.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MITpragma solidity ^0.8.24;\\n\\ncontract Constants {\\n    // coding convention to uppercase constant variablesaddress public constant MY_ADDRESS =\\n        0x777788889999AaAAbBbbCcccddDdeeeEfFFfCcCc;\\n    uint256 public constant MY_UINT = 123;\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 17,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "immutable",
    "name": "Immutable",
    "index": 4,
    "lesson": 4,
    "summary": "Introduction to immutable in Solidity",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Immutable\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Variables declared as \", _jsxDEV(_components.code, {\n        children: \"immutable\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 23\n      }, this), \" are a less restricted than those declared as \", _jsxDEV(_components.code, {\n        children: \"constant\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 80\n      }, this), \". Immutable variables can be assigned a value at construction time. The value can be changed at any time before deployment and then it becomes permanent.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"One additional restriction is that immutables can only be assigned to inside expressions for which there is no possibility of being executed after creation. This excludes all modifier definitions and functions other than constructors.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Immutable {\\n    // coding convention to uppercase constant variables address public immutable MY_ADDRESS;\\n    uint256 public immutable MY_UINT;\\n\\n    constructor(uint256 _myUint) {\\n        MY_ADDRESS = msg.sender;\\n        MY_UINT = _myUint;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "variables",
    "name": "Variables",
    "index": 5,
    "lesson": 5,
    "summary": "Introduction to Solidity variables",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Variables\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"There are 3 types of variables in Solidity:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ol, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"State Variables\", \"\\n\", _jsxDEV(_components.ul, {\n          children: [\"\\n\", _jsxDEV(_components.li, {\n            children: \"Declared outside of functions\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 7,\n            columnNumber: 4\n          }, this), \"\\n\", _jsxDEV(_components.li, {\n            children: \"Stored on the blockchain\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 8,\n            columnNumber: 4\n          }, this), \"\\n\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 7,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"Local Variables\", \"\\n\", _jsxDEV(_components.ul, {\n          children: [\"\\n\", _jsxDEV(_components.li, {\n            children: \"Declared inside functions\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 10,\n            columnNumber: 4\n          }, this), \"\\n\", _jsxDEV(_components.li, {\n            children: \"Not stored on the blockchain\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 11,\n            columnNumber: 4\n          }, this), \"\\n\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"Global Variables\", \"\\n\", _jsxDEV(_components.ul, {\n          children: [\"\\n\", _jsxDEV(_components.li, {\n            children: \"Provides information about the blockchain\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 13,\n            columnNumber: 4\n          }, this), \"\\n\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 13,\n          columnNumber: 4\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Variables {\\n    // State variables are stored on the blockchain.\\n    string public text = \\\"Hello\\\";\\n    uint256 public num = 123;\\n\\n    function doSomething() public {\\n        // Local variables are not saved to the blockchain.\\n        uint256 i = 456;\\n\\n        // Here are some global variables\\n        uint256 timestamp = block.timestamp; // Current block timestamp\\n        address sender = msg.sender; // address of the caller\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "arrays",
    "name": "Arrays",
    "index": 6,
    "lesson": 6,
    "summary": "Introduction to Solidity Arrays",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Arrays\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Arrays can have a compile-time fixed size, or they can have a dynamic size.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The type of an array of fixed size \", _jsxDEV(_components.code, {\n        children: \"k\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 36\n      }, this), \" and element type \", _jsxDEV(_components.code, {\n        children: \"T\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 57\n      }, this), \" is written as \", _jsxDEV(_components.code, {\n        children: \"T[k]\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 75\n      }, this), \", and an array of dynamic size as \", _jsxDEV(_components.code, {\n        children: \"T[]\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 115\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract ArrayExample {\\n    // An array of fixed size 3 and element type uint\\n    uint[3] public fixedArray = [1, 2, 3];\\n\\n    // An array of dynamic size and element type uint\\n    uint[] public dynamicArray;\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"It is possible to mark state variable arrays public and have Solidity create a getter(which you will learn later in the challenges). The numeric index becomes a required parameter for the getter.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 20,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"More array examples:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 22,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Array {\\n    // Several ways to initialize an array\\n    uint256[] public arr;\\n    uint256[] public arr2 = [1, 2, 3];\\n    // Fixed sized array, all elements initialize to 0\\n    uint256[10] public myFixedSizeArr;\\n\\n    function get(uint256 i) public view returns (uint256) {\\n        return arr[i];\\n    }\\n\\n    // Solidity can return the entire array.\\n    // But this function should be avoided for\\n    // arrays that can grow indefinitely in length.\\n    function getArr() public view returns (uint256[] memory) {\\n        return arr;\\n    }\\n\\n    function push(uint256 i) public {\\n        // Append to array\\n        // This will increase the array length by 1.\\n        arr.push(i);\\n    }\\n\\n    function pop() public {\\n        // Remove last element from array\\n        // This will decrease the array length by 1\\n        arr.pop();\\n    }\\n\\n    function getLength() public view returns (uint256) {\\n        return arr.length;\\n    }\\n\\n    function remove(uint256 index) public {\\n        // Delete does not change the array length.\\n        // It resets the value at index to it's default value,\\n        // in this case 0\\n        delete arr[index];\\n    }\\n\\n    function examples() external {\\n        // create array in memory, only fixed size can be created\\n        uint256[] memory a = new uint256[](5);\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 24,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 24,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "mapping",
    "name": "Mapping",
    "index": 7,
    "lesson": 7,
    "summary": "Introduction to Solidity mapping",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Mapping\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Maps are created with the syntax \", _jsxDEV(_components.code, {\n        children: \"mapping(keyType => valueType)\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 34\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"keyType\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 5\n      }, this), \" can be any built-in value type, bytes, string, enum, or any contract. However, other user-defined or complex types, such as mappings, structs or array types are \", _jsxDEV(_components.strong, {\n        children: \"not\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 176\n      }, this), \" allowed.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"valueType\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this), \" can be any type including another mapping or an array.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"You can think of mappings as hash table. They are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.a, {\n        href: \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg/315px-Hash_table_3_1_1_0_1_0_0_SP.svg.png\",\n        children: \"Hash Table\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Mappings can only have a data location of \", _jsxDEV(_components.code, {\n        children: \"storage\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 43\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 14,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"They cannot be used as parameters of contract functions that are publicly visible. These restrictions are also true for arrays and structs that contain mappings.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 16,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Mapping {\\n    // Mapping from address to uint\\n    mapping(address => uint256) public myMap;\\n\\n    function get(address _addr) public view returns (uint256) {\\n        // Mapping always returns a value.\\n        // If the value was never set, it will return the default value.\\n        return myMap[_addr];\\n    }\\n\\n    function set(address _addr, uint256 _i) public {\\n        // Update the value at this address\\n        myMap[_addr] = _i;\\n    }\\n\\n    function remove(address _addr) public {\\n        // Reset the value to the default value.\\n        delete myMap[_addr];\\n    }\\n}\\n\\ncontract NestedMapping {\\n    // Nested mapping (mapping from address to another mapping)\\n    mapping(address => mapping(uint256 => bool)) public nested;\\n\\n    function get(address _addr1, uint256 _i) public view returns (bool) {\\n        // You can get values from a nested mapping\\n        // even when it is not initialized\\n        return nested[_addr1][_i];\\n    }\\n\\n    function set(address _addr1, uint256 _i, bool _boo) public {\\n        nested[_addr1][_i] = _boo;\\n    }\\n\\n    function remove(address _addr1, uint256 _i) public {\\n        delete nested[_addr1][_i];\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "visibility",
    "name": "Visibility",
    "index": 8,
    "lesson": 8,
    "summary": "Introduction to Solidity visibility and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Visibility\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Solidity knows two kinds of function calls: external and internal ones. Internal functions can be made inaccessible to derived contracts. This gives rise to four types of visibility for functions.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"external\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this), \"\\nExternal functions are part of the contract interface, which means they can be called from other contracts and via transactions. An external function f cannot be called internally (i.e. f() does not work, but this.f() works).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"public\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 1\n      }, this), \"\\nPublic functions are part of the contract interface and can be either called internally or via message calls.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"internal\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\nInternal functions can only be accessed from within the current contract or contracts deriving from it. They cannot be accessed externally.Can take parameters of internal types like mappings or storage references.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"private\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this), \"\\nPrivate functions are like internal ones but they are not visible in derived contracts.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract BaseContract {\\n    // External function\\n    // Can be called from other contracts and via transactions\\n    // Cannot be called internally\\n    function externalFunc() external pure returns (string memory) {\\n        return \\\"External function called\\\";\\n    }\\n\\n    // Public function\\n    // Can be called internally or via message calls\\n    function publicFunc() public pure returns (string memory) {\\n        return \\\"Public function called\\\";\\n    }\\n\\n    // Internal function\\n    // Can only be accessed from within the current contract or contracts deriving from it\\n    // Cannot be accessed externally\\n    function internalFunc() internal pure returns (string memory) {\\n        return \\\"Internal function called\\\";\\n    }\\n\\n    // Private function\\n    // Can only be accessed from within the current contract\\n    // Cannot be accessed from derived contracts or externally\\n    function privateFunc() private pure returns (string memory) {\\n        return \\\"Private function called\\\";\\n    }\\n\\n    function testFuncs() public view returns (string memory, string memory) {\\n        // Call the public and internal functions\\n        // Call the external function using \\\"this\\\"\\n        return (publicFunc(), this.externalFunc());\\n    }\\n}\\n\\ncontract DerivedContract is BaseContract {\\n    function callBaseFuncs() public view returns (string memory, string memory) {\\n        // Can call the public and internal functions of the base contract\\n        return (publicFunc(), internalFunc());\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "functions",
    "name": "Functions",
    "index": 9,
    "lesson": 9,
    "summary": "Introduction to Solidity functions and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Functions\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Functions can be defined inside and outside of contracts. Functions take typed parameters as input.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"To write or update a state variable you need to send a transaction.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Free function defined outside of a contract\\n// Always has implicit internal visibility\\nfunction freeFunction(uint a, uint b) pure returns (uint) {\\n    return a + b;\\n}\\n\\ncontract Simple {\\n    uint sum;\\n\\n    // Function defined inside a contract\\n    // Takes two uint parameters as input\\n    function taker(uint a, uint b) public {\\n        sum = a + b;\\n    }\\n\\n    // Function that returns multiple values\\n    // The names of return variables can be omitted\\n    function arithmetic(uint a, uint b)\\n        public\\n        pure\\n        returns (uint, uint)\\n    {\\n        return (a + b, a * b);\\n    }\\n\\n    // Function that uses an early return\\n    // Must provide return values together with the return statement\\n    function earlyReturn(uint a, uint b)\\n        public\\n        pure\\n        returns (uint sum, uint product)\\n    {\\n        if (a == 0 || b == 0) {\\n            return (0, 0);\\n        }\\n\\n        sum = a + b;\\n        product = a * b;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "getter-functions",
    "name": "Getter Functions",
    "index": 10,
    "lesson": 10,
    "summary": "Introduction to Solidity getter functions and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Getter Functions\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Compiling your contract automatically creates getter functions for all \", _jsxDEV(_components.code, {\n        children: \"public\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 72\n      }, this), \" state variables.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Getter functions can be declared \", _jsxDEV(_components.code, {\n        children: \"view\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 34\n      }, this), \" or \", _jsxDEV(_components.code, {\n        children: \"pure\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 44\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"View\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this), \" function promises that they will not modify the state.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"Pure\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this), \" function declares that no state variable will be changed or read. In particular, it should be possible to evaluate a \", _jsxDEV(_components.code, {\n        children: \"pure\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 125\n      }, this), \" function at compile-time given only its inputs and \", _jsxDEV(_components.code, {\n        children: \"msg.data\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 183\n      }, this), \", but without any knowledge of the current blockchain state.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract ViewAndPureExample {\\n    uint public stateVar = 10;\\n\\n    // View function\\n    // Can read state variables but cannot modify them\\n    function viewFunc() public view returns (uint) {\\n        return stateVar;\\n    }\\n\\n    // Pure function\\n    // Cannot read or modify state variables\\n    function pureFunc(uint x, uint y) public pure returns (uint) {\\n        return x + y;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "enumerables",
    "order": 11,
    "title": "Enumerables",
    "description": "Introduction to enum types and how to use it in your smart contracts.",
    "difficulty": "Beginner",
    "published": true,
    "name": "Enumerables",
    "index": 11,
    "lesson": 11,
    "summary": "Introduction to enum types and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Enumerables\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Solidity supports enumerables(enum) and they are useful to keep track of state. Enums are one way to create a user-defined type.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The options are represented by subsequent unsigned integer values starting from \", _jsxDEV(_components.code, {\n        children: \"0\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 81\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Game {\\n    // Enum representing game status\\n    enum Status {\\n        NotStarted,\\n        InProgress,\\n        GameOver,\\n        Won\\n    }\\n\\n    // Default value is the first element listed in\\n    // definition of the type, in this case \\\"NotStarted\\\"\\n    Status public status;\\n\\n    // Returns uint\\n    // NotStarted - 0\\n    // InProgress - 1\\n    // GameOver   - 2\\n    // Won        - 3\\n    function getStatus() public view returns (Status) {\\n        return status;\\n    }\\n\\n    // Update status by passing uint into input\\n    function setStatus(Status _status) public {\\n        status = _status;\\n    }\\n\\n    // You can update to a specific enum like this\\n    function win() public {\\n        status = Status.Won;\\n    }\\n\\n    // delete resets the enum to its first value, 0\\n    function reset() public {\\n        delete status;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"To declare \", _jsxDEV(_components.code, {\n        children: \"enum\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 12\n      }, this), \":\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity//\",\n        children: \"pragma solidity ^0.8.24;\\n// This is saved as 'GameStatus.sol'\\n\\nenum Status {\\n    NotStarted,\\n    InProgress,\\n    GameOver,\\n    Won\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 53,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 53,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"To import the \", _jsxDEV(_components.code, {\n        children: \"enum\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 65,\n        columnNumber: 15\n      }, this), \" above:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 65,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./GameStatus.sol\\\";\\n\\ncontract Enum {\\n    Status public status;\\n\\n    function setStatus(Status _status) public {\\n        status = _status;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 67,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 67,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "struct",
    "name": "Struct",
    "index": 12,
    "lesson": 12,
    "summary": "Introduction to struct types and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Struct\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Structs are custom defined types that can group several variables.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"You can define the type by creating a \", _jsxDEV(_components.code, {\n        children: \"struct\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 39\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Structs can be declared outside of a contract and imported in another contract.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Tasks {\\n    // Define a new struct type 'Task' with three fields.\\n    struct Task {\\n        string title;\\n        string description;\\n        bool done;\\n    }\\n\\n    // Declare a dynamic array 'tasks' of 'Task' structs.\\n    Task[] public tasks;\\n\\n    // Add a new task to the 'tasks' array.\\n    function addTask(string calldata _title, string calldata _description) public {\\n        // Create a new temporary 'Task' object in memory.\\n        Task memory newTask;\\n        newTask.title = _title;\\n        newTask.description = _description;\\n        newTask.done = false;\\n\\n        // Add the 'newTask' into the 'tasks' array.\\n        tasks.push(newTask);\\n    }\\n\\n    // Mark a task as done.\\n    function markTaskAsDone(uint256 _index) public {\\n        // Get a reference to the task in the 'tasks' array using the '_index'.\\n        Task storage task = tasks[_index];\\n        task.done = true;\\n    }\\n\\n    // Get the details of a task.\\n    function getTask(uint256 _index) public view returns (string memory title, string memory description, bool done) {\\n        Task storage task = tasks[_index];\\n        return (task.title, task.description, task.done);\\n    }\\n\\n    // Update the title of a task.\\n    function updateTaskTitle(uint256 _index, string calldata _newTitle) public {\\n        Task storage task = tasks[_index];\\n        task.title = _newTitle; // Set the new title of the task\\n    }\\n\\n    // Update the description of a task.\\n    function updateTaskDescription(uint256 _index, string calldata _newDescription) public {\\n        Task storage task = tasks[_index];\\n        task.description = _newDescription;\\n    }\\n\\n    // Delete the task from the 'tasks' array using the '_index'.\\n    // Note: The 'delete' keyword in Solidity doesn't actually delete the task from the 'tasks' array,\\n    // it just sets the task at the given index to its initial default state (i.e., an empty string (\\\"\\\") for 'title' and 'description', and 'false' for 'done').\\n    function deleteTask(uint256 _index) public {\\n        delete tasks[_index];\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Structs can also be declared and imported just like \", _jsxDEV(_components.code, {\n        children: \"enum\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 71,\n        columnNumber: 53\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 71,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "conditional-statements",
    "name": "Conditional Statements",
    "index": 13,
    "lesson": 13,
    "summary": "Introduction to Conditional Statements (if/else) and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Conditional Statements\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"If/Else\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Conditional statements in Solidity work similarly to other programming languages, allowing you to execute different code blocks based on certain conditions.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"if\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 5\n      }, this), \" statement is used to specify a block of code to be executed if a specified condition is true. The \", _jsxDEV(_components.code, {\n        children: \"else\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 108\n      }, this), \" statement is used to specify a block of code to be executed if the same condition is false.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract IfElse {\\n    // This function demonstrates the use of if/else conditional statements in Solidity.\\n    // The function takes an input 'x' and returns a value based on the condition that 'x' satisfies.\\n    function foo(uint256 x) public pure returns (uint256) {\\n        if (x < 10) {\\n            return 0;  // Return 0 if x is less than 10\\n        } else if (x < 20) {\\n            return 1;  // Return 1 if x is greater than or equal to 10 but less than 20\\n        } else {\\n            return 2; // Return 2 if x is greater than or equal to 20\\n        }\\n    }\\n\\n    // Below is ternary operator in Solidity, which is a shorthand way to write if/else statements.\\n    function ternary(uint256 _x) public pure returns (uint256) {\\n        return _x < 10 ? 1 : 2;\\n    }\\n\\n    // use of multiple conditions in an if/else statement using logical operators.\\n    function multipleConditions(uint256 a, uint256 b) public pure returns (uint256) {\\n        if (a > b && a < 20) {\\n            return 1;\\n        } else if (a <= b || a >= 20) {\\n            return 2;\\n        }\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "loops",
    "name": "Loops",
    "index": 14,
    "lesson": 14,
    "summary": "Introduction to loops (for/while) and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Loops\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"For/While\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Loops are used to repeat a block of code multiple times. There are three types of loops in Solidity: \", _jsxDEV(_components.code, {\n        children: \"for\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 102\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"while\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 109\n      }, this), \" and \", _jsxDEV(_components.code, {\n        children: \"do-while\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 121\n      }, this), \" loops.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.em, {\n        children: [\"Note: Loops with unfixed iterations can cause transaction failure due to block gas limits, which is why \", _jsxDEV(_components.code, {\n          children: \"while\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 106\n        }, this), \" and \", _jsxDEV(_components.code, {\n          children: \"do-while\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 118\n        }, this), \" are rarely used.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Loops {\\n    // 'for' loop example\\n    function sumUpTo(uint256 n) public pure returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i <= n; i++) {\\n            sum += i;\\n        }\\n        return sum; // Returns the sum of all numbers up to 'n'\\n    }\\n\\n    // 'while' loop example\\n    function countDownFrom(uint256 n) public pure returns (uint256[] memory) {\\n        uint256[] memory countdown = new uint256[](n);\\n        while (n > 0) {\\n            countdown[n-1] = n;\\n            n--;\\n        }\\n        return countdown; // Returns an array counting down from 'n' to 1\\n    }\\n\\n    // 'do-while' loop example (use with caution due to potential for infinite loops)\\n    function doWhileLoop(uint256 n) public pure returns (uint256) {\\n        uint256 i = 0;\\n        do {\\n            i++;\\n        } while (i < n);\\n        return i; // Returns 'n'\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "constructor",
    "name": "Constructor",
    "index": 15,
    "lesson": 15,
    "summary": "Introduction to constructors and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Constructor\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"A \", _jsxDEV(_components.code, {\n        children: \"constructor\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 3\n      }, this), \" is an optional function declared upon contract creation.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"If there is no \", _jsxDEV(_components.code, {\n        children: \"constructor\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 16\n      }, this), \", the contract will assume the default constructor, which is equivalent to \", _jsxDEV(_components.code, {\n        children: \"constructor() {}\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 104\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Simple contract with a constructor\\ncontract SimpleContract {\\n    uint256 public data;\\n\\n    constructor(uint256 _data) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n}\\n\\n// Contract with a constructor and a function to change the data\\ncontract ChangeableContract {\\n    uint256 public data;\\n\\n    constructor(uint256 _data) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n\\n    function setData(uint256 _data) public {\\n        data = _data; // Change 'data' to the new value passed to the function\\n    }\\n}\\n\\n// Base contract A\\ncontract A {\\n    string public name;\\n\\n    constructor(string memory _name) {\\n        name = _name; // Initialize 'name' with the value passed to the constructor\\n    }\\n}\\n\\n// Contract B inherits from A and has its own data\\ncontract B is A {\\n    uint256 public data;\\n\\n    constructor(string memory _name, uint256 _data) A(_name) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n}\\n\\n// Parent constructors are always called in the order of inheritance\\n// regardless of the order of parent contracts listed in the\\n// constructor of the child contract.\\n\\n// Order of constructors called:\\n// 1. A\\n// 2. B\\n// 3. C\\ncontract C is A, B {\\n    constructor(string memory _name, uint256 _data) A(_name) B(_name, _data) {}\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "data-location",
    "name": "Data Location",
    "index": 16,
    "lesson": 16,
    "summary": "Introduction to data locations and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Data Location\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"There are three data locations: \", _jsxDEV(_components.code, {\n        children: \"memory\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 33\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"storage\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 43\n      }, this), \" and \", _jsxDEV(_components.code, {\n        children: \"calldata\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 57\n      }, this), \". These keywords are used to specify the location of the data.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"storage\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 6,\n            columnNumber: 3\n          }, this), \" is location where state variables are stored. Permanent data on the blockchain.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 6,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"memory\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 8,\n            columnNumber: 3\n          }, this), \" is used to hold temporary values. Lifeime of memory variables limited to an external function call.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"calldata\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 10,\n            columnNumber: 3\n          }, this), \" is non-modifiable, non-persistent location where function arguments are stored (behaves mostly like memory).\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract DataLocations {\\n    uint256[] public numbers; // 'numbers' is a state variable and is stored in 'storage'\\n\\n    // 'arr' is a function argument and is stored in 'calldata'\\n    function addToNumbers(uint256[] calldata arr) public {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            numbers.push(arr[i]); // 'arr[i]' is read from 'calldata'\\n        }\\n    }\\n\\n    // 'x' is a local variable and is stored in 'memory'\\n    function calculateSum(uint256[] calldata arr) public pure returns (uint256) {\\n        uint256 sum = 0; // 'sum' is a local variable and is stored in 'memory'\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            sum += arr[i]; // 'arr[i]' is read from 'calldata'\\n        }\\n        return sum;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "try-catch",
    "name": "Try/Catch",
    "index": 17,
    "lesson": 17,
    "summary": "Introduction to Try/Catch and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Try/Catch\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"A failure in an external call can be gracefully caught using a try/catch statement.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"try\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 5\n      }, this), \" keyword has to be followed by an external function call.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Solidity also supports various \", _jsxDEV(_components.code, {\n        children: \"catch\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 32\n      }, this), \" blocks to handle different types of exceptions:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"catch Error(string memory reason)\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 3\n        }, this), \" to catch failing \", _jsxDEV(_components.code, {\n          children: \"revert()\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 56\n        }, this), \" and \", _jsxDEV(_components.code, {\n          children: \"require()\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 71\n        }, this)]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"catch Panic(uint256 panicCode){...}\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 11,\n          columnNumber: 3\n        }, this), \" to catch failing panic error, i.e. failing \", _jsxDEV(_components.code, {\n          children: \"assert\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 11,\n          columnNumber: 84\n        }, this), \"(), division by zero, arithmetic overflow, etc.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"catch (bytes memory reason){...}\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 12,\n          columnNumber: 3\n        }, this), \" to catch error signatures which does not match any other clause. In result, the declared variable returns the low-level error data.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"catch {...}\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 13,\n          columnNumber: 3\n        }, this), \" can be used if you are not interested in the error data.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 13,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// External contract used for try / catch examples\\ncontract ExternalContract {\\n    address public owner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Invalid address\\\");\\n        assert(_owner != 0x0000000000000000000000000000000000000001);\\n        owner = _owner;\\n    }\\n\\n    function performAction(uint256 x) public pure returns (string memory) {\\n        require(x != 0, \\\"Require failed\\\");\\n        return \\\"Action performed\\\";\\n    }\\n}\\n\\ncontract MainContract {\\n    event Log(string message);\\n    event LogBytes(bytes data);\\n\\n    ExternalContract public externalContract;\\n\\n    constructor() {\\n        // This ExternalContract is used for example of try catch with external call\\n        externalContract = new ExternalContract(msg.sender);\\n    }\\n\\n    // Example of try / catch with external call\\n    // handleExternalCall(0) => Log(\\\"External call failed\\\")\\n    // handleExternalCall(1) => Log(\\\"Action performed\\\")\\n    function handleExternalCall(uint256 _i) public {\\n        try externalContract.performAction(_i) returns (string memory result) {\\n            emit Log(result);\\n        } catch {\\n            emit Log(\\\"External call failed\\\");\\n        }\\n    }\\n\\n    // Example of try / catch with contract creation\\n    // handleNewContract(0x0000000000000000000000000000000000000000) => Log(\\\"Invalid address\\\")\\n    // handleNewContract(0x0000000000000000000000000000000000000001) => LogBytes(\\\"\\\")\\n    // handleNewContract(0x0000000000000000000000000000000000000002) => Log(\\\"ExternalContract created\\\")\\n    function handleNewContract(address _owner) public {\\n        try new ExternalContract(_owner) returns (ExternalContract _externalContract) {\\n            // you can use variable _externalContract here\\n            emit Log(\\\"ExternalContract created\\\");\\n        } catch Error(string memory reason) {\\n            // catch failing revert() and require()\\n            emit Log(reason);\\n        } catch (bytes memory reason) {\\n            // catch failing assert()\\n            emit LogBytes(reason);\\n        }\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 15,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 15,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "errors",
    "name": "Errors",
    "index": 18,
    "lesson": 18,
    "summary": "Introduction to errors and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Errors\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Errors in Solidity provide a convenient and gas-efficient way to explain why an operation failed. They can be defined inside and outside of contracts (including interfaces and libraries).\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"They have to be used together with \", _jsxDEV(_components.code, {\n        children: \"revert\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 36\n      }, this), \" statement which causes all changes in the current call to be reverted and passes the error data back to the caller.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Instances of errors can only be created using \", _jsxDEV(_components.code, {\n        children: \"revert\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 47\n      }, this), \" statements.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Examples of ways to use custom errors:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Error for insufficient balance for transfer. Needed `required` but only\\n// `available` available.\\n// @param available balance available.\\n// @param required requested amount to transfer.\\nerror InsufficientBalance(uint256 available, uint256 required);\\n\\n// Error for invalid recipient address\\nerror InvalidRecipient(address recipient);\\n\\n// Error for transfer amount being zero\\nerror ZeroTransfer();\\n\\ncontract MyToken {\\n    mapping(address => uint) balance;\\n\\n    function transfer(address to, uint256 amount) public {\\n        if (amount > balance[msg.sender]) {\\n            revert InsufficientBalance({\\n                available: balance[msg.sender],\\n                required: amount\\n            });\\n        }\\n\\n        if (to == address(0)) {\\n            revert InvalidRecipient(to);\\n        }\\n\\n        if (amount == 0) {\\n            revert ZeroTransfer();\\n        }\\n\\n        balance[msg.sender] -= amount;\\n        balance[to] += amount;\\n    }\\n    // ...\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "validations-and-assertions",
    "name": "Validations and Assertions",
    "index": 19,
    "lesson": 19,
    "summary": "Introduction to validations and assertions and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Validations and Assertions\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Validations and assertions are used to check the correctness of the data in your smart contract. They are used to ensure that the data is as expected and to prevent the contract from executing if the data is not as expected.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Validations and assertions also throws an error by calling \", _jsxDEV(_components.code, {\n        children: \"require\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 60\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"revert\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 71\n      }, this), \" or \", _jsxDEV(_components.code, {\n        children: \"assert\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 83\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"require(bool condition)\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 8,\n            columnNumber: 3\n          }, this), \": abort execution and revert state changes if condition is false (use as error in external component)\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"require(bool condition, string memory message)\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 10,\n            columnNumber: 3\n          }, this), \": abort execution and revert state changes if condition is false. Also provide error message.\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 10,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"revert()\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 12,\n            columnNumber: 3\n          }, this), \": abort execution and revert state changes\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 12,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"revert(string memory message)\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 14,\n            columnNumber: 3\n          }, this), \": abort execution and revert state changes providing an explanatory string\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 14,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [\"\\n\", _jsxDEV(_components.p, {\n          children: [_jsxDEV(_components.code, {\n            children: \"assert(bool condition)\"\n          }, undefined, false, {\n            fileName: \"<source.js>\",\n            lineNumber: 16,\n            columnNumber: 3\n          }, this), \": abort execution and revert state changes if condition is false (use for internal error)\"]\n        }, undefined, true, {\n          fileName: \"<source.js>\",\n          lineNumber: 16,\n          columnNumber: 3\n        }, this), \"\\n\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract MyContract {\\n    mapping(address => uint) public balance;\\n\\n    function deposit(uint amount) public {\\n        // Use require to validate inputs from external calls\\n        require(amount > 0, \\\"Deposit amount must be greater than 0\\\");\\n\\n        balance[msg.sender] += amount;\\n    }\\n\\n    function withdraw(uint amount) public {\\n        // Use require to validate inputs from external calls\\n        require(amount <= balance[msg.sender], \\\"Insufficient balance\\\");\\n\\n        balance[msg.sender] -= amount;\\n    }\\n\\n    function transfer(address to, uint amount) public {\\n        // Use revert to abort execution and revert state changes\\n        if (to == address(0)) {\\n            revert(\\\"Cannot transfer to zero address\\\");\\n        }\\n\\n        // Use require to validate inputs from external calls\\n        require(amount <= balance[msg.sender], \\\"Insufficient balance\\\");\\n\\n        balance[msg.sender] -= amount;\\n        balance[to] += amount;\\n\\n        // Use assert for internal errors that should never happen\\n        assert(balance[msg.sender] + balance[to] == amount);\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "function-modifier",
    "name": "Function Modifier",
    "index": 20,
    "lesson": 20,
    "summary": "Introduction to function modifiers and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Function Modifier\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Modifiers can be used to change the behavior of functions in a declarative way.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"For example, you can use a modifier to automatically check a condition prior to executing the function.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Like functions, modifiers can be overridden but only if they are marked \", _jsxDEV(_components.code, {\n        children: \"virtual\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 73\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.em, {\n        children: \"Note: having the same modifier name with different parameters, is not possible.\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract MyContract {\\n    address public owner;\\n    uint256 public balance;\\n    bool private _currentlyExecuting;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        _currentlyExecuting = false;\\n        balance = 0;\\n    }\\n\\n    // Modifier to check if the caller is the owner of the contract\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    // Modifier to check if multiple parameters are valid\\n    modifier validParams(address _addr, uint256 _amount) {\\n        require(_addr != address(0), \\\"Invalid address\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        _;\\n    }\\n\\n    // Modifier to prevent reentrancy attacks\\n    modifier nonReentrant {\\n        // Check if the function is currently being executed\\n        require(!_currentlyExecuting, \\\"Reentrant call\\\");\\n\\n        // Set the flag to true to signal that the function is being executed\\n        _currentlyExecuting = true;\\n\\n        // Execute the rest of the function\\n        _;\\n\\n        // Reset the flag to false after the function has finished executing\\n        _currentlyExecuting = false;\\n    }\\n\\n    // Function to deposit funds into the contract\\n    function depositFunds(uint256 _amount) public onlyOwner {\\n        balance += _amount;\\n    }\\n\\n    // Function that can only be called by the owner and is protected against reentrancy attacks\\n    function sensitiveFunction(address _to, uint256 _amount) public onlyOwner nonReentrant validParams(_to, _amount) {\\n        // Transfer the specified amount to the specified address\\n        balance -= _amount;\\n        // This is just an example, in a real contract you would use the transfer function of the address\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "events",
    "name": "Events",
    "index": 21,
    "lesson": 21,
    "summary": "Introduction to events and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Events\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Events are emitted by the EVM when certain actions are performed. They are defined in the contract code using the \", _jsxDEV(_components.code, {\n        children: \"event\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 115\n      }, this), \" keyword and can be emitted using the \", _jsxDEV(_components.code, {\n        children: \"emit\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 160\n      }, this), \" keyword.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"You can add the attribute \", _jsxDEV(_components.code, {\n        children: \"indexed\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 27\n      }, this), \" to up to three parameters. These parameters are added to special data structure known as \\\"Topics\\\".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Topics allow you to search for events. Parameters without the \", _jsxDEV(_components.code, {\n        children: \"indexed\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 63\n      }, this), \" attribute are stored in the data section of the log.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"pragma solidity ^0.8.0;\\n\\ncontract MyContract {\\n    // Define events\\n    event Transaction(address indexed sender, address indexed receiver, uint256 amount);\\n    event UserRegistered(address indexed user, string name);\\n    event UserUpdated(address indexed user, string name);\\n    event ContractPaused();\\n    event ContractResumed();\\n\\n    // Struct to hold user data\\n    struct User {\\n        string name;\\n    }\\n\\n    // Mapping from address to User data\\n    mapping(address => User) public users;\\n\\n    // Variable to track whether the contract is paused\\n    bool public paused = false;\\n\\n    // Function to transfer funds\\n    function transferFunds(address receiver, uint256 amount) public {\\n        (bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n\\n        // Emit the event to log the transaction\\n        emit Transaction(msg.sender, receiver, amount);\\n    }\\n\\n    // Function to register a new user\\n    function registerUser(string memory name) public {\\n        users[msg.sender] = User(name);\\n        emit UserRegistered(msg.sender, name);\\n    }\\n\\n    // Function to update a user's information\\n    function updateUser(string memory name) public {\\n        users[msg.sender].name = name;\\n        emit UserUpdated(msg.sender, name);\\n    }\\n\\n    // Function to pause the contract\\n    function pauseContract() public {\\n        paused = true;\\n        emit ContractPaused();\\n    }\\n\\n    // Function to resume the contract\\n    function resumeContract() public {\\n        paused = false;\\n        emit ContractResumed();\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "ether-units",
    "name": "Ether Units",
    "index": 22,
    "lesson": 22,
    "summary": "Introduction to ether units and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Ether Units\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Ether is the native cryptocurrency of the Ethereum blockchain. It is used to pay for transaction fees and computational services on the network.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Ether is divisible into smaller units, with the smallest unit being a \", _jsxDEV(_components.code, {\n        children: \"wei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 71\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"A literal number can take a suffix of \", _jsxDEV(_components.code, {\n        children: \"wei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 39\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"gwei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 46\n      }, this), \" or \", _jsxDEV(_components.code, {\n        children: \"ether\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 56\n      }, this), \" to specify a subdenomination of Ether. Ether numbers without a postfix (\", _jsxDEV(_components.code, {\n        children: \"wei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 136\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"gwei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 143\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"ether\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 151\n      }, this), \") are assumed to be \", _jsxDEV(_components.code, {\n        children: \"wei\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 178\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract EtherUnits {\\n    uint256 public oneWei = 1 wei;\\n    // 1 wei is equal to 1\\n    bool public isOneWei = 1 wei == 1;\\n\\n    unit256 public oneGwei = 1 gwei;\\n    // 1 gwei is equal to 1e9 wei\\n    bool public isOneGwei = 1 gwei == 1e9;\\n\\n    uint256 public oneEther = 1 ether;\\n    // 1 ether is equal to 10^18 wei\\n    bool public isOneEther = 1 ether == 1e18;\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "payable",
    "name": "Payable",
    "index": 23,
    "lesson": 23,
    "summary": "Introduction to payable keyword and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Payable\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"payable\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 5\n      }, this), \" keyword in Solidity is used to indicate that a function can receive Ether. This is required if you want to receive Ether in a function.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"An exception will be thrown if the receiving contract does not have a receive function \", _jsxDEV(_components.code, {\n        children: \"receive() external payable {...}\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 88\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract PayableExample {\\n    // Payable address can receive Ether\\n    address payable public recipient;\\n\\n    // Payable constructor can receive Ether\\n    constructor(address payable _recipient) {\\n        recipient = _recipient;\\n    }\\n\\n    // Function to deposit Ether into this contract.\\n    // Call this function along with some Ether.\\n    function deposit() public payable {}\\n\\n    // Function to withdraw all Ether from this contract.\\n    // Notice how this function below does not need payable keyword.\\n    // It has been defined in the global recipient variable.\\n    function withdraw() public {\\n        // get the amount of Ether stored in this contract\\n        uint256 amount = address(this).balance;\\n\\n        // send all Ether to recipient\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // Function to transfer Ether from this contract to another address\\n    function transfer(address payable _to, uint256 _amount) public {\\n        // Note that \\\"_to\\\" is declared as payable\\n        (bool success,) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // This function is called when Ether is sent without data\\n    receive() external payable {\\n        deposit();\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "fallback",
    "name": "Fallback",
    "index": 24,
    "lesson": 24,
    "summary": "Introduction to fallback function and how to use it in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Fallback\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 1\n      }, this), \" function is activated when:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: \"A contract is called without any function that exists\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: \"No data was provided and there is no receive Ether function\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 7,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"A contract can have at most one \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 9,\n        columnNumber: 33\n      }, this), \" function declared using either:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 9,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: _jsxDEV(_components.code, {\n          children: \"fallback() external payable { ... }\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 11,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 11,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: _jsxDEV(_components.code, {\n          children: \"fallback (bytes calldata input) external payable returns (bytes memory output) { ... }\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 12,\n          columnNumber: 3\n        }, this)\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 11,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"If \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 4\n      }, this), \" function was used in place of a \", _jsxDEV(_components.code, {\n        children: \"receive\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 14,\n        columnNumber: 47\n      }, this), \" function, it will only have 2300 gas stipend to limit gas intensive operations.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 14,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Notice how \", _jsxDEV(_components.code, {\n        children: \"function\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 12\n      }, this), \" keyword is not required when declaring a \", _jsxDEV(_components.code, {\n        children: \"fallback\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 64\n      }, this), \" function. All fallback functions must have \", _jsxDEV(_components.code, {\n        children: \"external\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 16,\n        columnNumber: 118\n      }, this), \" visibility.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 16,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Example 1: Receiving Ether\\ncontract EtherReceiver {\\n    uint public totalReceived;\\n\\n    // This fallback function is used to keep track of the total Ether received by the contract.\\n    // It's triggered when Ether is sent to the contract's address in a transaction without data.\\n    fallback() external payable {\\n        totalReceived += msg.value;\\n    }\\n}\\n\\n// Example 2: Proxy Pattern\\ncontract Proxy {\\n    address public implementation;\\n\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    // This fallback function is used to implement the proxy pattern.\\n    // Assuming implementation variable has `delegatecall` function.\\n    // It catches any calls that don't match any of the proxy's functions and forwards them to the implementation contract.\\n    // It's triggered when a function that doesn't exist in the proxy contract is called.\\n    fallback() external payable {\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n        require(success);\\n    }\\n}\\n\\n// Example 3: Default Functionality\\ncontract DefaultFunctionality {\\n    // Event to emit when the fallback function is triggered\\n    event FallbackTriggered(string message);\\n\\n    // This fallback function provides default functionality when no function is specified or the specified function doesn't exist.\\n    // It's triggered when the contract is called without specifying any function, or if the function specified doesn't exist in the contract.\\n    fallback() external {\\n        // Emit an event when the fallback function is triggered\\n        emit FallbackTriggered(\\\"Fallback function was called.\\\");\\n    }\\n}\\n\\n// Example 4: Fallback with bytes type input and output\\ncontract FallbackWithInputOutput {\\n    // Event to emit when the fallback function is triggered\\n    event FallbackTriggered(string message, bytes input, bytes output);\\n\\n    // This fallback function takes an input, performs some operation, and returns an output.\\n    // It's triggered when the contract is called without specifying any function, or if the function specified doesn't exist in the contract.\\n    fallback(bytes calldata input) external payable returns (bytes memory) {\\n        // Perform some operation with the input\\n        bytes memory output = new bytes(input.length);\\n        for (uint i = 0; i < input.length; i++) {\\n            output[i] = input[i];\\n        }\\n\\n        // Emit an event when the fallback function is triggered\\n        emit FallbackTriggered(\\\"Fallback function was called.\\\", input, output);\\n\\n        return output;\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 18,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 18,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  },
  {
    "id": "transacting-ether",
    "name": "Transacting Ether",
    "index": 25,
    "lesson": 25,
    "summary": "Introduction to transacting ether in your smart contracts.",
    "labels": ["solidity"],
    "content": {
      "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_components.h1, {\n    children: \"Sending Ether\"\n  }, undefined, false, {\n    fileName: \"<source.js>\",\n    lineNumber: 2,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
      "frontmatter": {},
      "scope": {}
    }
  }
]
