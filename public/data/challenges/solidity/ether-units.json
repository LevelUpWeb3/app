{
  "id": "ether-units",
  "name": "Ether Units",
  "index": 22,
  "lesson": 22,
  "summary": "Introduction to ether units and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Ether Units\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ether is the native cryptocurrency of the Ethereum blockchain. It is used to pay for transaction fees and computational services on the network.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ether is divisible into smaller units, with the smallest unit being a \", _jsx(_components.code, {\n        children: \"wei\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A literal number can take a suffix of \", _jsx(_components.code, {\n        children: \"wei\"\n      }), \", \", _jsx(_components.code, {\n        children: \"gwei\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"ether\"\n      }), \" to specify a subdenomination of Ether. Ether numbers without a postfix (\", _jsx(_components.code, {\n        children: \"wei\"\n      }), \", \", _jsx(_components.code, {\n        children: \"gwei\"\n      }), \", \", _jsx(_components.code, {\n        children: \"ether\"\n      }), \") are assumed to be \", _jsx(_components.code, {\n        children: \"wei\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract EtherUnits {\\n    uint256 public oneWei = 1 wei;\\n    // 1 wei is equal to 1\\n    bool public isOneWei = 1 wei == 1;\\n\\n    unit256 public oneGwei = 1 gwei;\\n    // 1 gwei is equal to 1e9 wei\\n    bool public isOneGwei = 1 gwei == 1e9;\\n\\n    uint256 public oneEther = 1 ether;\\n    // 1 ether is equal to 10^18 wei\\n    bool public isOneEther = 1 ether == 1e18;\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}