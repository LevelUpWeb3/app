{
  "id": "mapping",
  "name": "Mapping",
  "index": 7,
  "lesson": 7,
  "summary": "Introduction to Solidity mapping",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Mapping\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Maps are created with the syntax \", _jsx(_components.code, {\n        children: \"mapping(keyType => valueType)\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"keyType\"\n      }), \" can be any built-in value type, bytes, string, enum, or any contract. However, other user-defined or complex types, such as mappings, structs or array types are \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" allowed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"valueType\"\n      }), \" can be any type including another mapping or an array.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can think of mappings as hash table. They are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg/315px-Hash_table_3_1_1_0_1_0_0_SP.svg.png\",\n        children: \"Hash Table\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Mappings can only have a data location of \", _jsx(_components.code, {\n        children: \"storage\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They cannot be used as parameters of contract functions that are publicly visible. These restrictions are also true for arrays and structs that contain mappings.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Mapping {\\n    // Mapping from address to uint\\n    mapping(address => uint256) public myMap;\\n\\n    function get(address _addr) public view returns (uint256) {\\n        // Mapping always returns a value.\\n        // If the value was never set, it will return the default value.\\n        return myMap[_addr];\\n    }\\n\\n    function set(address _addr, uint256 _i) public {\\n        // Update the value at this address\\n        myMap[_addr] = _i;\\n    }\\n\\n    function remove(address _addr) public {\\n        // Reset the value to the default value.\\n        delete myMap[_addr];\\n    }\\n}\\n\\ncontract NestedMapping {\\n    // Nested mapping (mapping from address to another mapping)\\n    mapping(address => mapping(uint256 => bool)) public nested;\\n\\n    function get(address _addr1, uint256 _i) public view returns (bool) {\\n        // You can get values from a nested mapping\\n        // even when it is not initialized\\n        return nested[_addr1][_i];\\n    }\\n\\n    function set(address _addr1, uint256 _i, bool _boo) public {\\n        nested[_addr1][_i] = _boo;\\n    }\\n\\n    function remove(address _addr1, uint256 _i) public {\\n        delete nested[_addr1][_i];\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}