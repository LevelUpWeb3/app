{
  "id": "transacting-ether",
  "name": "Transacting Ether",
  "index": 25,
  "lesson": 25,
  "summary": "Introduction to transacting ether in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Transacting Ether\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ether transactions comprises of two main parts: sending and receiving ether.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recall that methods to transact ether revolves around \", _jsx(_components.code, {\n        children: \"payable\"\n      }), \" keyword.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sending Ether\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"transfer\"\n        }), \" / \", _jsx(_components.code, {\n          children: \"send\"\n        }), \" (NOT recommended due to 2300 gas limitations allowing potential reeentrancy attacks)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"sendValue\"\n        }), \" \", _jsx(_components.a, {\n          href: \"https://docs.openzeppelin.com/contracts/2.x/api/utils#Address-sendValue-address-payable-uint256-\",\n          children: \"OpenZeppelin\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"call\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recommended method is using \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" paired with reentrancy guard.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Simple example of sending Ether using \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" method:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract SendEther {\\n\\n    address public sender;\\n    uint256 public amount;\\n\\n    mapping(address => uint256) public balances;\\n\\n    function sendViaCall(address payable _to) public payable {\\n\\n        // Remember to update the balance before interactions prevent reentrancy attacks!\\n        // Follow Checks-Effects-Interactions pattern\\n        balances[msg.sender] -= amount;\\n        balances[to] += amount;\\n\\n        // Call returns a boolean value indicating success or failure.\\n        // This is the current recommended method to use.\\n        (bool sent, bytes memory data) = _to.call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using ReentrancyGuard:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract SendEtherExample is ReentrancyGuard {\\n    constructor () ReentrancyGuard() {}\\n\\n    // Event to emit when Ether is sent\\n    event EtherSent(address indexed to, uint256 amount);\\n\\n    // Function to send Ether using the `call` method\\n    function sendEther(address payable recipient, uint256 amount) external payable nonReentrant {\\n        // Check that the contract has enough Ether to send\\n        require(address(this).balance >= amount, \\\"Not enough Ether to send\\\");\\n\\n        emit EtherSent(recipient, amount);\\n\\n        // Send the Ether and check that the call was successful\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // Function to check the contract's Ether balance\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If sending Ether \", _jsx(\"strong\", {\n        children: \"after an effect\"\n      }), \", The recommended method to send Ether after an effect is using the \", _jsx(_components.a, {\n        href: \"https://docs.soliditylang.org/en/develop/common-patterns.html#withdrawal-pattern\",\n        children: \"withdrawal pattern\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Receiving Ether\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recall \", _jsx(_components.code, {\n        children: \"payable\"\n      }), \" keyword when implementing an Ether receive function.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If a contract receives Ether (without a function being called), either the \", _jsx(_components.code, {\n        children: \"receive() external payable {...}\"\n      }), \" or the \", _jsx(_components.code, {\n        children: \"fallback\"\n      }), \" function is executed.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ether will be rejected (by throwing an exception) if there are no \", _jsx(_components.code, {\n        children: \"receive\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"fallback\"\n      }), \" functions.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract ReceiveEtherExample {\\n    // Event to emit when Ether is received\\n    event EtherReceived(address indexed from, uint256 amount);\\n\\n    // Function to receive Ether\\n    receive() external payable {\\n        emit EtherReceived(msg.sender, msg.value);\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {\\n        // This function is called when no other function matches the called function,\\n        // or when someone just sent Ether without calling a function\\n        emit EtherReceived(msg.sender, msg.value);\\n    }\\n\\n    // Function to check the contract's Ether balance\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Flowchart to determine \", _jsx(_components.code, {\n        children: \"fallback\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"receive\"\n      }), \":\"]\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: `\ngraph TD;\n    A[Sender] -->|Call Send Ether| B[Contract B];\n    B --> |Process call function| C[msg.data empty?];\n    C -->|Yes| D[\"receive() exists?\"];\n    C -->|No| E[\"execute fallback()\"];\n    D -->|Yes| F[\"execute receive()\"];\n    D -->|No| G[\"execute fallback()\"];`\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
    "frontmatter": {},
    "scope": {}
  }
}