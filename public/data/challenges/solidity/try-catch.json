{
  "id": "try-catch",
  "name": "Try/Catch",
  "index": 17,
  "lesson": 17,
  "summary": "Introduction to Try/Catch and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Try/Catch\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A failure in an external call can be gracefully caught using a try/catch statement.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"try\"\n      }), \" keyword has to be followed by an external function call.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Solidity also supports various \", _jsx(_components.code, {\n        children: \"catch\"\n      }), \" blocks to handle different types of exceptions:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"catch Error(string memory reason)\"\n        }), \" to catch failing \", _jsx(_components.code, {\n          children: \"revert()\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"require()\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"catch Panic(uint256 panicCode){...}\"\n        }), \" to catch failing panic error, i.e. failing \", _jsx(_components.code, {\n          children: \"assert\"\n        }), \"(), division by zero, arithmetic overflow, etc.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"catch (bytes memory reason){...}\"\n        }), \" to catch error signatures which does not match any other clause. In result, the declared variable returns the low-level error data.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"catch {...}\"\n        }), \" can be used if you are not interested in the error data.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// External contract used for try / catch examples\\ncontract ExternalContract {\\n    address public owner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Invalid address\\\");\\n        assert(_owner != 0x0000000000000000000000000000000000000001);\\n        owner = _owner;\\n    }\\n\\n    function performAction(uint256 x) public pure returns (string memory) {\\n        require(x != 0, \\\"Require failed\\\");\\n        return \\\"Action performed\\\";\\n    }\\n}\\n\\ncontract MainContract {\\n    event Log(string message);\\n    event LogBytes(bytes data);\\n\\n    ExternalContract public externalContract;\\n\\n    constructor() {\\n        // This ExternalContract is used for example of try catch with external call\\n        externalContract = new ExternalContract(msg.sender);\\n    }\\n\\n    // Example of try / catch with external call\\n    // handleExternalCall(0) => Log(\\\"External call failed\\\")\\n    // handleExternalCall(1) => Log(\\\"Action performed\\\")\\n    function handleExternalCall(uint256 _i) public {\\n        try externalContract.performAction(_i) returns (string memory result) {\\n            emit Log(result);\\n        } catch {\\n            emit Log(\\\"External call failed\\\");\\n        }\\n    }\\n\\n    // Example of try / catch with contract creation\\n    // handleNewContract(0x0000000000000000000000000000000000000000) => Log(\\\"Invalid address\\\")\\n    // handleNewContract(0x0000000000000000000000000000000000000001) => LogBytes(\\\"\\\")\\n    // handleNewContract(0x0000000000000000000000000000000000000002) => Log(\\\"ExternalContract created\\\")\\n    function handleNewContract(address _owner) public {\\n        try new ExternalContract(_owner) returns (ExternalContract _externalContract) {\\n            // you can use variable _externalContract here\\n            emit Log(\\\"ExternalContract created\\\");\\n        } catch Error(string memory reason) {\\n            // catch failing revert() and require()\\n            emit Log(reason);\\n        } catch (bytes memory reason) {\\n            // catch failing assert()\\n            emit LogBytes(reason);\\n        }\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}