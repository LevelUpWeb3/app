{
  "id": "function-modifier",
  "name": "Function Modifier",
  "index": 20,
  "lesson": 20,
  "summary": "Introduction to function modifiers and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Function Modifier\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Modifiers can be used to change the behavior of functions in a declarative way.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"For example, you can use a modifier to automatically check a condition prior to executing the function.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Like functions, modifiers can be overridden but only if they are marked \", _jsxDEV(_components.code, {\n        children: \"virtual\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 73\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.em, {\n        children: \"Note: having the same modifier name with different parameters, is not possible.\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract MyContract {\\n    address public owner;\\n    uint256 public balance;\\n    bool private _currentlyExecuting;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        _currentlyExecuting = false;\\n        balance = 0;\\n    }\\n\\n    // Modifier to check if the caller is the owner of the contract\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    // Modifier to check if multiple parameters are valid\\n    modifier validParams(address _addr, uint256 _amount) {\\n        require(_addr != address(0), \\\"Invalid address\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        _;\\n    }\\n\\n    // Modifier to prevent reentrancy attacks\\n    modifier nonReentrant {\\n        // Check if the function is currently being executed\\n        require(!_currentlyExecuting, \\\"Reentrant call\\\");\\n\\n        // Set the flag to true to signal that the function is being executed\\n        _currentlyExecuting = true;\\n\\n        // Execute the rest of the function\\n        _;\\n\\n        // Reset the flag to false after the function has finished executing\\n        _currentlyExecuting = false;\\n    }\\n\\n    // Function to deposit funds into the contract\\n    function depositFunds(uint256 _amount) public onlyOwner {\\n        balance += _amount;\\n    }\\n\\n    // Function that can only be called by the owner and is protected against reentrancy attacks\\n    function sensitiveFunction(address _to, uint256 _amount) public onlyOwner nonReentrant validParams(_to, _amount) {\\n        // Transfer the specified amount to the specified address\\n        balance -= _amount;\\n        // This is just an example, in a real contract you would use the transfer function of the address\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 12,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}