{
  "id": "loops",
  "name": "Loops",
  "index": 14,
  "lesson": 14,
  "summary": "Introduction to loops (for/while) and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Loops\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"For/While\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Loops are used to repeat a block of code multiple times. There are three types of loops in Solidity: \", _jsxDEV(_components.code, {\n        children: \"for\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 102\n      }, this), \", \", _jsxDEV(_components.code, {\n        children: \"while\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 109\n      }, this), \" and \", _jsxDEV(_components.code, {\n        children: \"do-while\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 121\n      }, this), \" loops.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.em, {\n        children: [\"Note: Loops with unfixed iterations can cause transaction failure due to block gas limits, which is why \", _jsxDEV(_components.code, {\n          children: \"while\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 106\n        }, this), \" and \", _jsxDEV(_components.code, {\n          children: \"do-while\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 8,\n          columnNumber: 118\n        }, this), \" are rarely used.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Loops {\\n    // 'for' loop example\\n    function sumUpTo(uint256 n) public pure returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i <= n; i++) {\\n            sum += i;\\n        }\\n        return sum; // Returns the sum of all numbers up to 'n'\\n    }\\n\\n    // 'while' loop example\\n    function countDownFrom(uint256 n) public pure returns (uint256[] memory) {\\n        uint256[] memory countdown = new uint256[](n);\\n        while (n > 0) {\\n            countdown[n-1] = n;\\n            n--;\\n        }\\n        return countdown; // Returns an array counting down from 'n' to 1\\n    }\\n\\n    // 'do-while' loop example (use with caution due to potential for infinite loops)\\n    function doWhileLoop(uint256 n) public pure returns (uint256) {\\n        uint256 i = 0;\\n        do {\\n            i++;\\n        } while (i < n);\\n        return i; // Returns 'n'\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}