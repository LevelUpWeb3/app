{
  "id": "getter-functions",
  "name": "Getter Functions",
  "index": 10,
  "lesson": 10,
  "summary": "Introduction to Solidity getter functions and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Getter Functions\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Compiling your contract automatically creates getter functions for all \", _jsx(_components.code, {\n        children: \"public\"\n      }), \" state variables.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Getter functions can be declared \", _jsx(_components.code, {\n        children: \"view\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"pure\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"View\"\n      }), \" function promises that they will not modify the state.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Pure\"\n      }), \" function declares that no state variable will be changed or read. In particular, it should be possible to evaluate a \", _jsx(_components.code, {\n        children: \"pure\"\n      }), \" function at compile-time given only its inputs and \", _jsx(_components.code, {\n        children: \"msg.data\"\n      }), \", but without any knowledge of the current blockchain state.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract ViewAndPureExample {\\n    uint public stateVar = 10;\\n\\n    // View function\\n    // Can read state variables but cannot modify them\\n    function viewFunc() public view returns (uint) {\\n        return stateVar;\\n    }\\n\\n    // Pure function\\n    // Cannot read or modify state variables\\n    function pureFunc(uint x, uint y) public pure returns (uint) {\\n        return x + y;\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}