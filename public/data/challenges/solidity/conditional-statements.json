{
  "id": "conditional-statements",
  "name": "Conditional Statements",
  "index": 13,
  "lesson": 13,
  "summary": "Introduction to Conditional Statements (if/else) and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Conditional Statements\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: \"If/Else\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Conditional statements in Solidity work similarly to other programming languages, allowing you to execute different code blocks based on certain conditions.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"if\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 5\n      }, this), \" statement is used to specify a block of code to be executed if a specified condition is true. The \", _jsxDEV(_components.code, {\n        children: \"else\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 108\n      }, this), \" statement is used to specify a block of code to be executed if the same condition is false.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract IfElse {\\n    // This function demonstrates the use of if/else conditional statements in Solidity.\\n    // The function takes an input 'x' and returns a value based on the condition that 'x' satisfies.\\n    function foo(uint256 x) public pure returns (uint256) {\\n        if (x < 10) {\\n            return 0;  // Return 0 if x is less than 10\\n        } else if (x < 20) {\\n            return 1;  // Return 1 if x is greater than or equal to 10 but less than 20\\n        } else {\\n            return 2; // Return 2 if x is greater than or equal to 20\\n        }\\n    }\\n\\n    // Below is ternary operator in Solidity, which is a shorthand way to write if/else statements.\\n    function ternary(uint256 _x) public pure returns (uint256) {\\n        return _x < 10 ? 1 : 2;\\n    }\\n\\n    // use of multiple conditions in an if/else statement using logical operators.\\n    function multipleConditions(uint256 a, uint256 b) public pure returns (uint256) {\\n        if (a > b && a < 20) {\\n            return 1;\\n        } else if (a <= b || a >= 20) {\\n            return 2;\\n        }\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 10,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}