{
  "id": "operator",
  "name": "Operator",
  "index": 2,
  "lesson": 2,
  "summary": "Introduction to Solidity operators",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Operator\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Operators link variables, statements and functions together. In Solidity, arithmetic and bit operators can be applied even if two operands do not have same type.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT*pragma solidity ^0.8.24;\\n\\ncontract Operator {\\n\\n    uint8 public constant x = 1;\\n    uint32 public constant y = 4;\\n    //x + y = 5;\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ternary operator is used in expressions of the form \", _jsx(_components.code, {\n        children: \"<conditional> ? <if-true> : <if-false>\"\n      }), \". It evaluates if \", _jsx(_components.code, {\n        children: \"<conditional>\"\n      }), \" is truthy or falsy.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Compound and increment/decrement operators are available as shorthands. For example, \", _jsx(_components.code, {\n        children: \"a += e\"\n      }), \" is equivalent to \", _jsx(_components.code, {\n        children: \"a = a + e\"\n      }), \" .\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Other examples:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"a++\"\n        }), \" (equivalent to \", _jsx(_components.code, {\n          children: \"a += 1\"\n        }), \" )\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"a--\"\n        }), \" (equivalent to \", _jsx(_components.code, {\n          children: \"a -= 1\"\n        }), \" )\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"*=\"\n      }), \" Multiplication assignment operator:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"let a = 5; // a is 5\\na *= 2; // a is now 10 (5 * 2)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, \", _jsx(_components.code, {\n        children: \"a *= 2\"\n      }), \" is equivalent to \", _jsx(_components.code, {\n        children: \"a = a * 2\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"*=\"\n      }), \" operator multiplies the value of \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" by \", _jsx(_components.code, {\n        children: \"2\"\n      }), \" and then assigns the result back to \", _jsx(_components.code, {\n        children: \"a\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"<<=\"\n      }), \" Left shift assignment operator:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"let b = 4; // b is 4 (binary representation: 100)\\nb <<= 2; // b is now 16 (binary representation: 10000)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, \", _jsx(_components.code, {\n        children: \"b <<= 2\"\n      }), \" is equivalent to \", _jsx(_components.code, {\n        children: \"b = b << 2\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"<<=\"\n      }), \" operator shifts the bits of \", _jsx(_components.code, {\n        children: \"b\"\n      }), \" two places to the left. Each shift to the left doubles the number, so shifting \", _jsx(_components.code, {\n        children: \"4\"\n      }), \" (which is \", _jsx(_components.code, {\n        children: \"100\"\n      }), \" in binary) two places to the left results in \", _jsx(_components.code, {\n        children: \"16\"\n      }), \" (which is \", _jsx(_components.code, {\n        children: \"10000\"\n      }), \" in binary).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \">>=\"\n      }), \" Right shift assignment operator\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"let c = 16; // c is 16 (binary representation: 10000)\\nc >>= 2; // c is now 4 (binary representation: 100)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this example, \", _jsx(_components.code, {\n        children: \"c >>= 2\"\n      }), \" is equivalent to \", _jsx(_components.code, {\n        children: \"c = c >> 2\"\n      }), \". The \", _jsx(_components.code, {\n        children: \">>=\"\n      }), \" operator shifts the bits of \", _jsx(_components.code, {\n        children: \"c\"\n      }), \" two places to the right. Each shift to the right halves the number, so shifting \", _jsx(_components.code, {\n        children: \"16\"\n      }), \" (which is \", _jsx(_components.code, {\n        children: \"10000\"\n      }), \" in binary) two places to the right results in \", _jsx(_components.code, {\n        children: \"4\"\n      }), \" (which is \", _jsx(_components.code, {\n        children: \"100\"\n      }), \" in binary).\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}