{
  "id": "operator",
  "name": "Operator",
  "index": 2,
  "lesson": 2,
  "summary": "Introduction to Solidity operators",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Operator\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Operators link variables, statements and functions together. In Solidity, arithmetic and bit operators can be applied even if two operands do not have same type.\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT*pragma solidity ^0.8.24;\\n\\ncontract Operator {\\n\\n    uint8 public constant x = 1;\\n    uint32 public constant y = 4;\\n    //x + y = 5;\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Ternary operator is used in expressions of the form \", _jsxDEV(_components.code, {\n        children: \"<conditional> ? <if-true> : <if-false>\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 53\n      }, this), \". It evaluates if \", _jsxDEV(_components.code, {\n        children: \"<conditional>\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 17,\n        columnNumber: 111\n      }, this), \" is truthy or falsy.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 17,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Compound and increment/decrement operators are available as shorthands. For example, \", _jsxDEV(_components.code, {\n        children: \"a += e\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 19,\n        columnNumber: 86\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"a = a + e\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 19,\n        columnNumber: 112\n      }, this), \" .\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 19,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"Other examples:\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 21,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.ul, {\n      children: [\"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"a++\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 23,\n          columnNumber: 3\n        }, this), \" (equivalent to \", _jsxDEV(_components.code, {\n          children: \"a += 1\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 23,\n          columnNumber: 24\n        }, this), \" )\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 23,\n        columnNumber: 1\n      }, this), \"\\n\", _jsxDEV(_components.li, {\n        children: [_jsxDEV(_components.code, {\n          children: \"a--\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 24,\n          columnNumber: 3\n        }, this), \" (equivalent to \", _jsxDEV(_components.code, {\n          children: \"a -= 1\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 24,\n          columnNumber: 24\n        }, this), \" )\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 24,\n        columnNumber: 1\n      }, this), \"\\n\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 23,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"*=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 26,\n        columnNumber: 1\n      }, this), \" Multiplication assignment operator:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 26,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let a = 5; // a is 5\\na *= 2; // a is now 10 (5 * 2)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 28,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"a *= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"a = a * 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 44\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \"*=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 61\n      }, this), \" operator multiplies the value of \", _jsxDEV(_components.code, {\n        children: \"a\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 99\n      }, this), \" by \", _jsxDEV(_components.code, {\n        children: \"2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 106\n      }, this), \" and then assigns the result back to \", _jsxDEV(_components.code, {\n        children: \"a\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 33,\n        columnNumber: 146\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 33,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"<<=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 35,\n        columnNumber: 1\n      }, this), \" Left shift assignment operator:\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 35,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let b = 4; // b is 4 (binary representation: 100)\\nb <<= 2; // b is now 16 (binary representation: 10000)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 37,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 37,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"b <<= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"b = b << 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 45\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \"<<=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 63\n      }, this), \" operator shifts the bits of \", _jsxDEV(_components.code, {\n        children: \"b\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 97\n      }, this), \" two places to the left. Each shift to the left doubles the number, so shifting \", _jsxDEV(_components.code, {\n        children: \"4\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 180\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"100\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 194\n      }, this), \" in binary) two places to the left results in \", _jsxDEV(_components.code, {\n        children: \"16\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 245\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"10000\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 260\n      }, this), \" in binary).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 42,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \">>=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 44,\n        columnNumber: 1\n      }, this), \" Right shift assignment operator\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"let c = 16; // c is 16 (binary representation: 10000)\\nc >>= 2; // c is now 4 (binary representation: 100)\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 46,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 46,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this example, \", _jsxDEV(_components.code, {\n        children: \"c >>= 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 18\n      }, this), \" is equivalent to \", _jsxDEV(_components.code, {\n        children: \"c = c >> 2\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 45\n      }, this), \". The \", _jsxDEV(_components.code, {\n        children: \">>=\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 63\n      }, this), \" operator shifts the bits of \", _jsxDEV(_components.code, {\n        children: \"c\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 97\n      }, this), \" two places to the right. Each shift to the right halves the number, so shifting \", _jsxDEV(_components.code, {\n        children: \"16\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 181\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"10000\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 196\n      }, this), \" in binary) two places to the right results in \", _jsxDEV(_components.code, {\n        children: \"4\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 250\n      }, this), \" (which is \", _jsxDEV(_components.code, {\n        children: \"100\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 51,\n        columnNumber: 264\n      }, this), \" in binary).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 51,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}