{
  "id": "data-location",
  "name": "Data Location",
  "index": 16,
  "lesson": 16,
  "summary": "Introduction to data locations and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Data Location\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are three data locations: \", _jsx(_components.code, {\n        children: \"memory\"\n      }), \", \", _jsx(_components.code, {\n        children: \"storage\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"calldata\"\n      }), \". These keywords are used to specify the location of the data.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"storage\"\n          }), \" is location where state variables are stored. Permanent data on the blockchain.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"memory\"\n          }), \" is used to hold temporary values. Lifeime of memory variables limited to an external function call.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.code, {\n            children: \"calldata\"\n          }), \" is non-modifiable, non-persistent location where function arguments are stored (behaves mostly like memory).\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract DataLocations {\\n    uint256[] public numbers; // 'numbers' is a state variable and is stored in 'storage'\\n\\n    // 'arr' is a function argument and is stored in 'calldata'\\n    function addToNumbers(uint256[] calldata arr) public {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            numbers.push(arr[i]); // 'arr[i]' is read from 'calldata'\\n        }\\n    }\\n\\n    // 'x' is a local variable and is stored in 'memory'\\n    function calculateSum(uint256[] calldata arr) public pure returns (uint256) {\\n        uint256 sum = 0; // 'sum' is a local variable and is stored in 'memory'\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            sum += arr[i]; // 'arr[i]' is read from 'calldata'\\n        }\\n        return sum;\\n    }\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}