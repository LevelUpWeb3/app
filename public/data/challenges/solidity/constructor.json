{
  "id": "constructor",
  "name": "Constructor",
  "index": 15,
  "lesson": 15,
  "summary": "Introduction to constructors and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Constructor\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"A \", _jsxDEV(_components.code, {\n        children: \"constructor\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 3\n      }, this), \" is an optional function declared upon contract creation.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"If there is no \", _jsxDEV(_components.code, {\n        children: \"constructor\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 16\n      }, this), \", the contract will assume the default constructor, which is equivalent to \", _jsxDEV(_components.code, {\n        children: \"constructor() {}\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 104\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n// Simple contract with a constructor\\ncontract SimpleContract {\\n    uint256 public data;\\n\\n    constructor(uint256 _data) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n}\\n\\n// Contract with a constructor and a function to change the data\\ncontract ChangeableContract {\\n    uint256 public data;\\n\\n    constructor(uint256 _data) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n\\n    function setData(uint256 _data) public {\\n        data = _data; // Change 'data' to the new value passed to the function\\n    }\\n}\\n\\n// Base contract A\\ncontract A {\\n    string public name;\\n\\n    constructor(string memory _name) {\\n        name = _name; // Initialize 'name' with the value passed to the constructor\\n    }\\n}\\n\\n// Contract B inherits from A and has its own data\\ncontract B is A {\\n    uint256 public data;\\n\\n    constructor(string memory _name, uint256 _data) A(_name) {\\n        data = _data; // Initialize 'data' with the value passed to the constructor\\n    }\\n}\\n\\n// Parent constructors are always called in the order of inheritance\\n// regardless of the order of parent contracts listed in the\\n// constructor of the child contract.\\n\\n// Order of constructors called:\\n// 1. A\\n// 2. B\\n// 3. C\\ncontract C is A, B {\\n    constructor(string memory _name, uint256 _data) A(_name) B(_name, _data) {}\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}