{
  "id": "payable",
  "name": "Payable",
  "index": 23,
  "lesson": 23,
  "summary": "Introduction to payable keyword and how to use it in your smart contracts.",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.h1, {\n      children: \"Payable\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 2,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"payable\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 5\n      }, this), \" keyword in Solidity is used to indicate that a function can receive Ether. This is required if you want to receive Ether in a function.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"An exception will be thrown if the receiving contract does not have a receive function \", _jsxDEV(_components.code, {\n        children: \"receive() external payable {...}\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 88\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.pre, {\n      children: _jsxDEV(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract PayableExample {\\n    // Payable address can receive Ether\\n    address payable public recipient;\\n\\n    // Payable constructor can receive Ether\\n    constructor(address payable _recipient) {\\n        recipient = _recipient;\\n    }\\n\\n    // Function to deposit Ether into this contract.\\n    // Call this function along with some Ether.\\n    function deposit() public payable {}\\n\\n    // Function to withdraw all Ether from this contract.\\n    // Notice how this function below does not need payable keyword.\\n    // It has been defined in the global recipient variable.\\n    function withdraw() public {\\n        // get the amount of Ether stored in this contract\\n        uint256 amount = address(this).balance;\\n\\n        // send all Ether to recipient\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // Function to transfer Ether from this contract to another address\\n    function transfer(address payable _to, uint256 _amount) public {\\n        // Note that \\\"_to\\\" is declared as payable\\n        (bool success,) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // This function is called when Ether is sent without data\\n    receive() external payable {\\n        deposit();\\n    }\\n}\\n\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}