{
  "id": "data-types",
  "name": "Data Types",
  "index": 1,
  "lesson": 1,
  "summary": "Introduction to Solidity data types",
  "labels": [
    "solidity"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Data Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Solidity is a statically typed language, which means that the type of each variable (state and local) needs to be specified. Solidity provides several elementary types such as:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"bool\"\n        }), \" (boolean)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"uint\"\n        }), \",\", _jsx(_components.code, {\n          children: \"uint256\"\n        }), \",\", _jsx(_components.code, {\n          children: \"uint32\"\n        }), \" (unsigned integer)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"int\"\n        }), \",\", _jsx(_components.code, {\n          children: \"int256\"\n        }), \",\", _jsx(_components.code, {\n          children: \"int32\"\n        }), \" (signed integer)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"address\"\n        }), \" (Ethereum address)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract Primitives {\\n    bool public boo = true;\\n\\n    /*\\n    uint stands for unsigned integer, meaning non negative integers\\n    different sizes are available\\n        uint8   ranges from 0 to 2 ** 8 - 1\\n        uint16  ranges from 0 to 2 ** 16 - 1\\n        ...\\n        uint256 ranges from 0 to 2 ** 256 - 1\\n    */uint8 public u8 = 1;\\n    uint256 public u256 = 456;\\n    uint256 public u = 123; // uint is an alias for uint256/*\\n    Negative numbers are allowed for int types.\\n    Like uint, different ranges are available from int8 to int256\\n\\n    int256 ranges from -2 ** 255 to 2 ** 255 - 1\\n    int128 ranges from -2 ** 127 to 2 ** 127 - 1\\n    */int8 public i8 = -1;\\n    int256 public i256 = 456;\\n    int256 public i = -123; // int is same as int256// minimum and maximum of intint256 public minInt = type(int256).min;\\n    int256 public maxInt = type(int256).max;\\n\\n    address public addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Bytes in Solidity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In Solidity, the \", _jsx(_components.code, {\n        children: \"bytes\"\n      }), \" data type is used to represent a sequence of bytes. Bytes are useful for storing binary data, such as file contents or cryptographic hashes.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two types of byte arrays in Solidity:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Fixed-size byte arrays\"\n          }), \": These are declared with \", _jsx(_components.code, {\n            children: \"bytes1\"\n          }), \" to \", _jsx(_components.code, {\n            children: \"bytes32\"\n          }), \". The number indicates the length of the array in bytes. For example, \", _jsx(_components.code, {\n            children: \"bytes1\"\n          }), \" is a byte array of length 1, \", _jsx(_components.code, {\n            children: \"bytes2\"\n          }), \" is a byte array of length 2, and so on up to \", _jsx(_components.code, {\n            children: \"bytes32\"\n          }), \".\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Dynamically-sized byte arrays\"\n          }), \": These are declared with \", _jsx(_components.code, {\n            children: \"bytes\"\n          }), \". This type is similar to \", _jsx(_components.code, {\n            children: \"byte[]\"\n          }), \" in other languages.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here's an example of how to use byte arrays:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// Declare a fixed-size byte array\\nbytes1 a = 0xb5; // [10110101]\\nbytes1 b = 0x56; // [01010110]\\n\\n// Declare a bytes10 array\\nbytes10 d = 0x68656c6c6f776f726c64; // \\\"helloworld\\\" in hexadecimal\\n\\n// Declare a bytes32 array\\nbytes32 e = 0x68656c6c6f776f726c6420202020202020202020202020202020202020202020; // \\\"helloworld\\\" padded with spaces in hexadecimal\\n\\n// Declare a dynamically-sized byte array\\nbytes memory c = \\\"Hello, world!\\\";\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}