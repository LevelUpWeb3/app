{
  "id": "OpenZeppelin",
  "name": "OpenZeppelin",
  "index": 10,
  "website": "https://github.com/LevelUpWeb3/OpenZeppelin-Mission",
  "heroImage": "/heros/test.jpg",
  "docs": "https://github.com/orgs/LevelUpWeb3/repositories",
  "summary": "Take this mission to get started with OpenZeppelin Contracts Wizard",
  "labels": [
    "Smart Contracts",
    "Security"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Get Started with OpenZeppelin Contracts Wizard\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Welcome to level 1 of the OpenZeppelin mission by Level Up!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenZeppelin offers a suite of tools and libraries designed to help developers create, deploy, and manage smart contracts in a secure and efficient manner. In this mission, you'll learn how to use the OpenZeppelin Contracts Wizard to create custom ERC smart contracts for Ethereum.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"High Level Structure\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GitHub Repository:\"\n        }), \" Begin by exploring the GitHub repository and README.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guide:\"\n        }), \" Proceed to the guide where you will find instructions on using the OpenZeppelin Contracts Wizard to create an ERC-20 token.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mission\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Visit the OpenZeppelin documentation to understand the services and tools provided.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Follow the guide to learn how to access the OpenZeppelin Contracts Wizard, create an ERC-20 token, customize its features, set parameters, and generate Solidity code.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Set up your development environment with Hardhat or Truffle and install the OpenZeppelin Contracts library.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integrate the generated Solidity code into your project and deploy your ERC-20 token to a test network.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Complete the mission to level up your skills with OpenZeppelin and start building secure and efficient smart contracts for your blockchain projects!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}