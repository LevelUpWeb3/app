{
  "id": "exploring-solidity-objects-address-part-1",
  "name": "Exploring Solidity Objects: Address - Part 1",
  "index": 1,
  "summary": "Dive into the world of Solidity in pursuit of leveling up! Starting with Address object.",
  "author": "RH",
  "authorIcon": "https://pbs.twimg.com/profile_images/1751242830398287872/8VKShh46.jpg",
  "authorLink": "https://x.com/rh_bdl",
  "published": "Jul 03, 2024",
  "readTime": "3 min read",
  "labels": [
    "Smart Contract"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsxDEV: _jsxDEV} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {ContentCopy} = _components;\n  if (!ContentCopy) _missingMdxReference(\"ContentCopy\", true, \"12:1-20:26\");\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(_components.p, {\n      children: [\"If you have been tinkering with Solidity, you might have used or came across the \", _jsxDEV(_components.code, {\n        children: \"address\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 82\n      }, this), \" object in Solidity. Common use cases of this object includes reading \", _jsxDEV(_components.code, {\n        children: \"address\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 4,\n        columnNumber: 161\n      }, this), \" balance, and sending tokens.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 4,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In this article, we will explore the different members of \", _jsxDEV(_components.code, {\n        children: \"address\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 59\n      }, this), \" while referencing Solidity's \", _jsxDEV(_components.a, {\n        href: \"https://docs.soliditylang.org/en/latest/cheatsheet.html#members-of-address\",\n        children: \"docs\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 6,\n        columnNumber: 98\n      }, this), \".\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 6,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: _jsxDEV(_components.strong, {\n        children: \"1. Balance\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 8,\n        columnNumber: 4\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 8,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: \"The balance member provides access to read balance of address in Wei (1 Ether = 10^18 Wei).\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 10,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(ContentCopy, {\n      code: `function retrieveBalance() public view returns (uint256) {\n    //returns ETH balance of deployed contract in Wei\n    return address(this).balance;\n}\n\nfunction retrieveUserBalance(address user) public view returns (uint256) {\n    //returns ETH balance of user's address in Wei\n    return address(user).balance;\n}`,\n      language: \"solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 12,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"retrieveBalance()\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 22,\n        columnNumber: 1\n      }, this), \" function is an example of a gotcha that catches new Solidity devs off-guard. It is not unusual to assume that \", _jsxDEV(_components.code, {\n        children: \"address(this).balance\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 22,\n        columnNumber: 131\n      }, this), \" would return the balance of our address. In reality, it is the balance of the smart contract itself that is read.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 22,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: _jsxDEV(_components.strong, {\n        children: \"2. Code\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 24,\n        columnNumber: 4\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 24,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"The \", _jsxDEV(_components.code, {\n        children: \"code\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 26,\n        columnNumber: 5\n      }, this), \" member allows us to query the deployed contract’s bytecode information.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 26,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(ContentCopy, {\n      code: `function retrieveCode() public view returns (bytes memory) {\n    //returns EVM bytecode\n    return address(this).code;\n}\n\nfunction retrieveCodehash() public view returns (bytes32) {\n    //returns Keccak-256 hash of the EVM bytecode\n    return address(this).codehash;\n}`,\n      language: \"solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"retrieveCode()\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 38,\n        columnNumber: 1\n      }, this), \" queries the EVM bytecode and in this example, the output looks something like this “0x60806040…4300081a0033”.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 38,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"This is useful for contract verification purposes. \", _jsxDEV(_components.a, {\n        href: \"https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2#code\",\n        children: \"Here\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 40,\n        columnNumber: 52\n      }, this), \" is an example of WETH’s deployed contract in Etherscan. Scroll below to see the Deployed Bytecode’s output.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 40,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"retrieveCodehash()\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 42,\n        columnNumber: 1\n      }, this), \" simply provides the Keccak-256 hash of the output. It provides a more efficient way to verify the deployed contract as it is cheaper in terms of gas costs.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 42,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h2, {\n      children: _jsxDEV(_components.strong, {\n        children: \"3. Transfer, Send & Call\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 44,\n        columnNumber: 4\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"• Transfer & Send\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 46,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"Typically invoked for sending Ether. Level Up has also put together a \", _jsxDEV(_components.a, {\n        href: \"(https://www.levelupweb3.xyz/solidity/transacting-ether)\",\n        children: \"guide\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 48,\n        columnNumber: 71\n      }, this), \" covering these members. The section below covers the output/responses when using these members.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 48,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(ContentCopy, {\n      code: `function transferKeyword(uint256 ethAmount) public {\n    // NOT recommended for sending Ether\n    // Reverts with error if txn fails\n    payable(address(this)).transfer(ethAmount);\n}\n\nfunction sendKeyword(uint256 ethAmount) public returns (bool) {\n    // NOT recommended for sending Ether\n    // Reverts with bool: \"false\" if txn fails\n    return payable(address(this)).send(ethAmount);\n}`,\n      language: \"solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 50,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"transfer\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 62,\n        columnNumber: 1\n      }, this), \" and \", _jsxDEV(_components.code, {\n        children: \"send\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 62,\n        columnNumber: 16\n      }, this), \" members are \", _jsxDEV(_components.em, {\n        children: \"not\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 62,\n        columnNumber: 35\n      }, this), \" recommended for sending Ether. Take note on the expected responses if you plan to use them.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 62,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"In situations of failed transactions, \", _jsxDEV(_components.code, {\n        children: \"transfer\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 64,\n        columnNumber: 39\n      }, this), \" reverts with an error while \", _jsxDEV(_components.code, {\n        children: \"send\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 64,\n        columnNumber: 78\n      }, this), \" returns a boolean value of \", _jsxDEV(_components.code, {\n        children: \"false\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 64,\n        columnNumber: 112\n      }, this), \" (but the transaction will be successful).\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 64,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: _jsxDEV(_components.strong, {\n        children: [\"Note: \", _jsxDEV(_components.code, {\n          children: \"send\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), \" updates state, but \", _jsxDEV(_components.code, {\n          children: \"transfer\"\n        }, undefined, false, {\n          fileName: \"<source.js>\",\n          lineNumber: 66,\n          columnNumber: 35\n        }, this), \" does not. Both members still consume gas regardless of the transaction status.\"]\n      }, undefined, true, {\n        fileName: \"<source.js>\",\n        lineNumber: 66,\n        columnNumber: 1\n      }, this)\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 66,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.h3, {\n      children: \"• Call\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 68,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(ContentCopy, {\n      code: `function callKeyword(uint256 ethAmount) public {\n    // RECOMMENDED method to send Ether\n    // Passing blanks (\"\") because the example below shows empty calldata\n    (bool sent, ) = address(this).call{value: ethAmount}(\"\");\n    require(sent, \"Failed to send Ether\");\n}`,\n      language: \"solidity\"\n    }, undefined, false, {\n      fileName: \"<source.js>\",\n      lineNumber: 70,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [_jsxDEV(_components.code, {\n        children: \"call\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 80,\n        columnNumber: 1\n      }, this), \" is recommended due to its \", _jsxDEV(_components.a, {\n        href: \"https://forum.openzeppelin.com/t/should-we-never-use-the-transfer-function/38445\",\n        children: \"flexibility for sending Ether\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 80,\n        columnNumber: 34\n      }, this), \". It also allows you to pass arguments if interacting with custom functions that require any parameters.\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 80,\n      columnNumber: 1\n    }, this), \"\\n\", _jsxDEV(_components.p, {\n      children: [\"This concludes part 1. In the next part, we will cover other members of the address object such as \", _jsxDEV(_components.code, {\n        children: \"staticcall\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 82,\n        columnNumber: 100\n      }, this), \" and \", _jsxDEV(_components.code, {\n        children: \"delegatecall\"\n      }, undefined, false, {\n        fileName: \"<source.js>\",\n        lineNumber: 82,\n        columnNumber: 117\n      }, this), \". Stay tuned!\"]\n    }, undefined, true, {\n      fileName: \"<source.js>\",\n      lineNumber: 82,\n      columnNumber: 1\n    }, this)]\n  }, undefined, true, {\n    fileName: \"<source.js>\",\n    lineNumber: 1,\n    columnNumber: 1\n  }, this);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n      fileName: \"<source.js>\"\n    }, this)\n  }), undefined, false, {\n    fileName: \"<source.js>\"\n  }, this) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component, place) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\" + (place ? \"\\nIt’s referenced in your code at `\" + place + \"`\" : \"\"));\n}\n",
    "frontmatter": {},
    "scope": {}
  }
}