{
  "id": "level-up-foundry",
  "name": "Level Up: Building with Foundry",
  "index": 3,
  "summary": "Learn smart contract development with Foundry, a blazingly fast framework for building and deploying smart contracts!",
  "author": "RH",
  "authorIcon": "https://pbs.twimg.com/profile_images/1751242830398287872/8VKShh46.jpg",
  "authorLink": "https://x.com/rh_bdl",
  "published": "Sep 09, 2024",
  "readTime": "11 min read",
  "labels": [
    "Smart Contract"
  ],
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In Level Up, this Foundry module is designed to reduce friction by immediately equipping you with fundamental skills to develop smart contracts on Scroll Sepolia.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In order to facilitate this process, we have curated a simplified structure to help you get started with Foundry on Scroll Sepolia.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are feeling adventurous, jump into your code editor and follow along!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"What is Foundry?\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/\",\n        children: \"Foundry\"\n      }), \" is a blazingly fast, portable and modular toolkit for Ethereum application development written in Rust.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Why Foundry?\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Write all your code ONLY in Solidity (i.e. scripts, tests, all in Solidity)!\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Speedrun your developer journey without having to learn multiple languages.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"How Foundry?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Glad you asked ðŸ”¥.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's dive right in!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[0]: Install Foundry\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Foundry is installed using Foundryup.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"curl -L https://foundry.paradigm.xyz | bash\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Source your \", _jsx(_components.code, {\n        children: \".zshenv\"\n      }), \" file to ensure the path is updated.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"source /Users/your_username/.zshenv\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To verify the installation, run the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge --version\\n// forge 0.x.x ...\\ncast --version\\n// cast 0.x.x ...\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additional resource from Foundry Book specific to \", _jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/getting-started/installation\",\n        children: \"installation\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[1]: Create a Foundry Project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a new project and navigate into it.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"mkdir foundry-project\\ncd foundry-project\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"forge init\"\n      }), \" in your terminal to create a new Foundry project.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge init\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[2]: Compiling a Foundry Project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this example, we will use a simple EtherWallet example below:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ncontract EtherWallet {\\naddress payable public owner;\\n\\n    constructor() {\\n        owner = payable(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw(uint _amount) external {\\n        require(msg.sender == owner, \\\"caller is not owner\\\");\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Rename \", _jsx(_components.code, {\n        children: \"Contract.sol\"\n      }), \" in \", _jsx(_components.code, {\n        children: \"src/Contract.sol\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"EtherWallet.sol\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Delete \", _jsx(_components.code, {\n        children: \"src/test\"\n      }), \" folder. We will not be using it in this Speedrun lesson.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"forge build\"\n      }), \" to compile the contract:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge build\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Navigate to the \", _jsx(_components.code, {\n        children: \"out\"\n      }), \" folder and you will see the compiled contract \", _jsx(_components.code, {\n        children: \"EtherWallet.json\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[3]: Deploying on anvil\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Anvil is a local testnet node shipped with Foundry.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run \", _jsx(_components.code, {\n        children: \"anvil\"\n      }), \" in your terminal.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project anvil\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This command spins up a local server hosted on \", _jsx(_components.a, {\n        href: \"http://localhost:8545\",\n        children: \"http://localhost:8545\"\n      }), \" that runs the test network. (Server URL can vary depending on user environment)\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To deploy on anvil, run:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// $foundry-project forge create <NAME CONTRACT> --rpc-url <LOCALHOST> --interactive\\nforge create EtherWallet --rpc-url http://localhost:8545 --interactive\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will be prompted to enter your private key. Go into the anvil terminal, then copy any private key from the terminal.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Paste it in the terminal where you are deploying the contract.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// $foundry-project forge create <NAME CONTRACT> --rpc-url <LOCALHOST> --interactive\\nforge create EtherWallet --rpc-url http://localhost:8545 --interactive\\n// paste anvil private key\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After running the command, you should see an output similar to this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"Deployer: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\nDeployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3\\nTransaction hash: 0x4b1d82d3d33674496088b5e92e99494280ffcc1f27035269873a5ca04c432c93\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[4]: Deploying with Script\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Foundry allows you to deploy smart contracts by running a script. Scripts are recognisable through the \", _jsx(_components.code, {\n        children: \"s.sol\"\n      }), \" extension and stored in \", _jsx(_components.code, {\n        children: \"/scripts\"\n      }), \" folder.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is what a script example named \", _jsx(_components.code, {\n        children: \"DeployEtherWallet.s.sol\"\n      }), \" would look like:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-solidity\",\n        children: \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { Script, console2 } from \\\"forge-std/Script.sol\\\";\\nimport { EtherWallet } from \\\"../src/EtherWallet.sol\\\";\\n\\ncontract EtherWalletScript is Script {\\nfunction run() external returns (EtherWallet) {\\nvm.startBroadcast();\\n\\n       EtherWallet etherWallet = new EtherWallet();\\n\\n       vm.stopBroadcast();\\n       return etherWallet;\\n\\n}\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"anvil\"\n      }), \" to simulate onchain transactions.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge script script/DeployEtherWallet.s.sol --rpc-url http://localhost:8545 --broadcast\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Forge simulates the script and \", _jsx(_components.code, {\n        children: \"â€”broadcast\"\n      }), \" flag was added to broadcast the transaction.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[5]: Setting up Deployment Environment\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are two ways to do this in Foundry. One is the traditional way of using a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file and the other is by using Foundry tools. Patrick Collins did an amazing job explaining it \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/watch?v=VQe7cIpaE54\",\n        children: \"here\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We'll start off with explaining the awesome way using Foundry!\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using Foundry Tools\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Open your local machine terminal and run:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// cast wallet import <ACCOUNT_NAME> --interactive\\ncast wallet import defaultKey --interactive\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You will be prompted to enter your private key and a password to secure \", _jsx(_components.code, {\n        children: \"<ACCOUNT_NAME>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REMINDER: We recommend to pass your private key and a password on your computer's terminal and NOT the code editor.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For additional security measures:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Leveled up security - Delete your history by running the following command:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"history -c\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Godlike security - Run \", _jsx(_components.code, {\n        children: \"rm <TERMINAL_HISTORY>\"\n      }), \" to delete your terminal history!\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"rm .bash_history\\n// or rm .zsh_history if you use zsh shell\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Finally, run the command below to see the list of all accounts available:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"cast wallet list\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      children: [\"Using \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" File\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file in the root directory of your project.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project touch .env\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"File contents would look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"PRIVATE_KEY=0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\\nRPC_URL=http://localhost:8545\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Load \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file in foundry by running:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project source .env\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To deploy a contract, you can now run:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge script script/DeployEtherWallet.s.sol --rpc-url $RPC_URL --broadcast --private-key $PRIVATE_KEY\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"REMINDER: You should \", _jsx(_components.strong, {\n        children: \"NEVER\"\n      }), \" place a private key or a secret phrase in a \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file that is associated with real funds! This is a HUGE security risk. (If you have not taken the .env pledge, do it \", _jsx(_components.a, {\n        href: \"https://github.com/smartcontractkit/full-blockchain-solidity-course-js/discussions/5\",\n        children: \"NOW\"\n      }), \"!)\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[6]: Deploy on Scroll Sepolia Network\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Setting up Scroll Sepolia Network & Testnet Funds\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We're almost there to deployment!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First let's add the Scroll network to your metamask.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Head over to \", _jsx(_components.a, {\n        href: \"https://sepolia.scroll.io/portal\",\n        children: \"Scroll Sepolia\"\n      }), \" and add Scroll Sepolia testnet to your wallet.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: Check out this quick \", _jsx(_components.a, {\n        href: \"https://twitter.com/BuildWithScroll/status/1714789104129581454\",\n        children: \"video on X\"\n      }), \" if you prefer adding Scroll Sepolia via \", _jsx(_components.a, {\n        href: \"https://chainlist.org/chain/534351\",\n        children: \"Chainlist\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that we've added the network to our MetaMask, \", _jsx(_components.a, {\n        href: \"https://t.me/+PdNbk5milo1mMTAy\",\n        children: \"click here\"\n      }), \" to join Level Up Telegram group for Scroll Sepolia ETH or visit the faucet links in \", _jsx(_components.a, {\n        href: \"https://docs.scroll.io/en/user-guide/faucet/\",\n        children: \"Scroll's Faucet documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you run into issues with testnet eth, please let us know in the Level Up Telegram group.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Deploying to Scroll Sepolia\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Contract deployment uses \", _jsx(_components.code, {\n        children: \"forge create\"\n      }), \" command.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge create <CONTRACT_NAME> --rpc-url <NETWORK> --account <ACCOUNT_NAME>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this case, the command will look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"$foundry-project forge create EtherWallet --rpc-url https://sepolia-rpc.scroll.io/ --account defaultKey --broadcast\\n// optional: add -vvv for verbose output (add v's as needed to increase verbosity)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Enter your password and voila! Your contract is deployed on Scroll Sepolia!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are updating the \", _jsx(_components.code, {\n        children: \"RPC_URL\"\n      }), \" in \", _jsx(_components.code, {\n        children: \".env\"\n      }), \", remember to run \", _jsx(_components.code, {\n        children: \"source .env\"\n      }), \" to reload the environment variable changes.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[7]: Contract Verification\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Verifying your contract makes your contract readable on a block explorer like Etherscan or \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://sepolia.scrollscan.com/\",\n          children: \"Scrollscan\"\n        })\n      }), \". This also provides a user interface for contract interaction.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You will first need API keys to verify your contract via Foundry. Here's how to do this:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Create an account at \", _jsx(_components.a, {\n          href: \"https://scrollscan.com/register\",\n          children: \"https://scrollscan.com/register\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Get API Keys from your account\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's an explainer \", _jsx(_components.a, {\n        href: \"https://youtu.be/ks9Cj-lP1Tw?t=360\",\n        children: \"video\"\n      }), \" if you are stuck.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Update your \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file to include two new variables:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"VERIFIER_URL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SCROLLSCAN_API_KEY\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Reload the environment variables by running \", _jsx(_components.code, {\n        children: \"source .env\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The command structure for verifying contract is as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge verify-contract <CONTRACT_ADDRESS> <CONTRACT_NAME>\\n  --verifier-url <BLOCK_EXPLORER_URL> \\\\\\n  --etherscan-api-key <SCROLLSCAN_API_KEY> \\\\\\n  --constructor-args <CONSTRUCTOR_ARGUMENTS> //if any\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is an example of my command with a random contract address:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge verify-contract 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 EtherWallet\\n  --verifier-url $VERIFIER_URL \\\\\\n  --etherscan-api-key $SCROLLSCAN_API_KEY \\\\\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"[8]: Contract Interaction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can interact with your smart contract by using the \", _jsx(_components.code, {\n        children: \"cast\"\n      }), \" command.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is the general structure to using \", _jsx(_components.code, {\n        children: \"cast\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"cast [options] <CONTRACT_FUNCTION> [args]\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"While there are many \", _jsx(_components.a, {\n        href: \"https://book.getfoundry.sh/reference/cast/cast?highlight=cast#cast\",\n        children: \"options\"\n      }), \" available to interact with contracts, we focus on the two common options: \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"send\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"call\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To retrieve data from the contract in the blockchain:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// Get the balance of the contract\\n$foundry-project cast call 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 \\\"getBalance()\\\" --rpc-url $RPC_URL\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"NOTE: Private key does not need to be passed in \", _jsx(_components.code, {\n        children: \"call\"\n      }), \" command as it does not require any transaction to be sent.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: _jsx(_components.code, {\n        children: \"send\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To execute function in the contract:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// Send 0.1 Ether to the contract\\n$foundry-project cast send 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 --value 100000000000000000 --private-key $PRIVATE_KEY --rpc-url $RPC_URL\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// Withdraw 0.000099999999999999 Ether\\n$foundry-project cast send 0x998608B4f83249c4217ADb9060Fb739d4A52C6A2 \\\"withdraw(uint)\\\" 99999999999999990 --private-key $PRIVATE_KEY --rpc-url $RPC_URL\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Foundry summary\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You made it to the end of speedrunning Foundry Smart Contract Development! ðŸŽ‰\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We have learned that:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Foundry is a smart contract development toolchain that simplifies the smart contract development.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Comes with HUGEEE set of tools to compile, deploy, and interact with smart contracts.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At Level Up, we have identified the five tools that you will commonly use in Foundry. These include:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"1. Create a Foundry project\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge init\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"2. Compiling\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge build\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"3. Initializing a local blockchain on Foundry\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"anvil\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"4. Contract Deployment\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"forge create <CONTRACT_NAME> --rpc-url <NETWORK> --account <ACCOUNT_NAME>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"5. Contract Interaction\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"cast [options] <CONTRACT_FUNCTION> [args]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that you have grasped Level Zero of Foundry, you are ready to dive into the world of smart contract development! ðŸš€\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}