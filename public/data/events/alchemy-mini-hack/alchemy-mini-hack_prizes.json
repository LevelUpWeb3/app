{
  "id": "alchemy-mini-hack_prizes",
  "title": "Prizes",
  "index": 2,
  "content": {
    "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"strong\", {\n      children: \"Bounty amount\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"$5000 prize pool for up to 10 winners\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"strong\", {\n      children: \"Submission criteria\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A short description and brief video demo of your project\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Public Github repo\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deployed and verified smart contract on Scroll in your Github README\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Pointed use of the Alchemy RPC in your code through your favorite smart contract tooling configuration files (i.e., foundry.toml or hardhat config) in your Github README\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Coding should start from September 24th\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"strong\", {\n      children: \"Judging criteria\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Creativity\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Technicality\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Usability\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
    "frontmatter": {},
    "scope": {}
  }
}